{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n  const [edges, setEdges] = useState(generateRandomEdges());\n  const [finalActivation, setFinalActivation] = useState(0);\n  function generateRandomHiddenNodes() {\n    const numNodes = Math.floor(Math.random() * 5) + 1;\n    const nodes = [];\n    for (let i = 0; i < numNodes; i++) {\n      nodes.push({\n        id: `hidden${i + 1}`,\n        x: Math.random() * 500,\n        y: Math.random() * 300\n      });\n    }\n    return nodes;\n  }\n  function generateRandomEdges() {\n    const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length;\n    const edges = [];\n    const inputNodeIds = Object.keys(inputValues);\n    for (let i = 0; i < numEdges; i++) {\n      const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)];\n      const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`;\n      const weight = Math.random() * 2 - 1;\n      edges.push({\n        source,\n        target,\n        weight\n      });\n    }\n    return edges;\n  }\n  useEffect(() => {\n    setHiddenNodes(generateRandomHiddenNodes());\n    setEdges(generateRandomEdges());\n  }, [inputValues]);\n  useEffect(() => {\n    const activation = calculateFinalActivation(inputValues, hiddenNodes);\n    setFinalActivation(activation);\n  }, [inputValues, hiddenNodes]);\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = {\n      id,\n      x: Math.random() * 500,\n      y: Math.random() * 300\n    };\n    setHiddenNodes([...hiddenNodes, newNode]);\n  };\n  const removeHiddenNode = id => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"800\",\n      height: \"400\",\n      children: [hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: \"blue\"\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)), edges.map(edge => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: edge.sourceX,\n        y1: edge.sourceY,\n        x2: edge.targetX,\n        y2: edge.targetY,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, `${edge.source}-${edge.target}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)), edges.map(edge => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: edge.sourceX,\n        cy: edge.sourceY,\n        r: \"5\",\n        fill: \"red\",\n        children: /*#__PURE__*/_jsxDEV(\"animateMotion\", {\n          dur: \"2s\",\n          repeatCount: \"indefinite\",\n          children: /*#__PURE__*/_jsxDEV(\"mpath\", {\n            href: `#path-${edge.source}-${edge.target}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, `${edge.source}-${edge.target}-animation`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)), edges.map(edge => /*#__PURE__*/_jsxDEV(\"path\", {\n        id: `path-${edge.source}-${edge.target}`,\n        d: `M ${edge.sourceX} ${edge.sourceY} L ${edge.targetX} ${edge.targetY}`\n      }, `path-${edge.source}-${edge.target}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"700\",\n        y: \"100\",\n        fill: \"black\",\n        children: [\"Output Node: \", finalActivation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHiddenNode,\n      children: \"Add Hidden Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeHiddenNode(node.id),\n      children: [\"Remove \", node.id]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"EUAG8NdNvoCJbS6S7syZ6MxzWnU=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","generateRandomHiddenNodes","edges","setEdges","generateRandomEdges","finalActivation","setFinalActivation","numNodes","Math","floor","random","nodes","i","push","id","x","y","numEdges","length","inputNodeIds","Object","keys","source","target","weight","activation","addHiddenNode","newNode","removeHiddenNode","filter","node","className","children","width","height","map","cx","cy","r","fill","fileName","_jsxFileName","lineNumber","columnNumber","edge","x1","sourceX","y1","sourceY","x2","targetX","y2","targetY","stroke","strokeWidth","dur","repeatCount","href","d","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n  const [edges, setEdges] = useState(generateRandomEdges());\n  const [finalActivation, setFinalActivation] = useState(0);\n\n  function generateRandomHiddenNodes() {\n    const numNodes = Math.floor(Math.random() * 5) + 1;\n    const nodes = [];\n    for (let i = 0; i < numNodes; i++) {\n      nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n    }\n    return nodes;\n  }\n\n  function generateRandomEdges() {\n    const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length;\n    const edges = [];\n    const inputNodeIds = Object.keys(inputValues);\n    for (let i = 0; i < numEdges; i++) {\n      const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)];\n      const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`;\n      const weight = Math.random() * 2 - 1;\n      edges.push({ source, target, weight });\n    }\n    return edges;\n  }\n\n  useEffect(() => {\n    setHiddenNodes(generateRandomHiddenNodes());\n    setEdges(generateRandomEdges());\n  }, [inputValues]);\n\n  useEffect(() => {\n    const activation = calculateFinalActivation(inputValues, hiddenNodes);\n    setFinalActivation(activation);\n  }, [inputValues, hiddenNodes]);\n\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = { id, x: Math.random() * 500, y: Math.random() * 300 };\n    setHiddenNodes([...hiddenNodes, newNode]);\n  };\n\n  const removeHiddenNode = (id) => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <svg width=\"800\" height=\"400\">\n        {/* Render nodes */}\n        {hiddenNodes.map(node => (\n          <circle key={node.id} cx={node.x} cy={node.y} r=\"20\" fill=\"blue\" />\n        ))}\n\n        {/* Render edges */}\n        {edges.map(edge => (\n          <line key={`${edge.source}-${edge.target}`} x1={edge.sourceX} y1={edge.sourceY} x2={edge.targetX} y2={edge.targetY} stroke=\"black\" strokeWidth=\"2\" />\n        ))}\n\n        {/* Render animations */}\n        {edges.map(edge => (\n          <circle key={`${edge.source}-${edge.target}-animation`} cx={edge.sourceX} cy={edge.sourceY} r=\"5\" fill=\"red\">\n            <animateMotion dur=\"2s\" repeatCount=\"indefinite\">\n              <mpath href={`#path-${edge.source}-${edge.target}`} />\n            </animateMotion>\n          </circle>\n        ))}\n\n        {/* Render paths for animations */}\n        {edges.map(edge => (\n          <path key={`path-${edge.source}-${edge.target}`} id={`path-${edge.source}-${edge.target}`} d={`M ${edge.sourceX} ${edge.sourceY} L ${edge.targetX} ${edge.targetY}`} />\n        ))}\n\n        {/* Render output node */}\n        <text x=\"700\" y=\"100\" fill=\"black\">Output Node: {finalActivation}</text>\n      </svg>\n      <button onClick={addHiddenNode}>Add Hidden Node</button>\n      {hiddenNodes.map(node => (\n        <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n      ))}\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}