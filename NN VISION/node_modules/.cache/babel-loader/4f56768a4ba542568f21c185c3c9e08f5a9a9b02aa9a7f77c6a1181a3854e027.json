{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\n// NeuralNetwork.js\nimport React, { useState } from 'react';\nimport './NeuralNetwork.css'; // CSS for styling the neural network\nimport { calculateFinalActivation } from './utils'; // Function to calculate final activation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork() {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150\n  }\n  // Initial hidden nodes\n  // Format: { id: 'hidden1', x: 300, y: 150 }\n  ]);\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = {\n      id,\n      x: 300,\n      y: 150\n    }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n  };\n  const removeHiddenNode = id => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n  };\n  const handleAnimations = () => {\n    // Implement CSS animations for signal/data flow\n    const svgElements = document.querySelectorAll('.signal-flow');\n    svgElements.forEach(element => {\n      element.style.animation = 'flowAnimation 2s linear infinite';\n    });\n  };\n  const handleEdgeWeights = () => {\n    // Implement displaying edge weights\n    const svg = document.querySelector('svg');\n    edges.forEach(edge => {\n      const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n      text.setAttribute(\"x\", (edge.sourceX + edge.targetX) / 2);\n      text.setAttribute(\"y\", (edge.sourceY + edge.targetY) / 2);\n      text.setAttribute(\"fill\", \"black\");\n      text.textContent = edge.weight.toFixed(2); // Assuming edge.weight contains weight value\n      svg.appendChild(text);\n    });\n  };\n  const handleReLUActivation = () => {\n    // Implement ReLU activation for the output node\n    const finalActivation = calculateFinalActivation(inputValues, hiddenNodes);\n    const outputNode = document.getElementById('outputNode');\n    outputNode.textContent = `Activation: ${finalActivation}`; // Update text content of output node\n  };\n\n  // Call functions when component mounts\n  useEffect(() => {\n    handleAnimations();\n    handleEdgeWeights();\n    handleReLUActivation();\n  }, []); // Empty dependency array to run once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHiddenNode,\n      children: \"Add Hidden Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeHiddenNode(node.id),\n      children: [\"Remove \", node.id]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"9g3u7PGaboCNdNAd+QrQq36RJKs=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","_s","hiddenNodes","setHiddenNodes","id","x","y","addHiddenNode","length","newNode","removeHiddenNode","filter","node","handleAnimations","svgElements","document","querySelectorAll","forEach","element","style","animation","handleEdgeWeights","svg","querySelector","edges","edge","text","createElementNS","setAttribute","sourceX","targetX","sourceY","targetY","textContent","weight","toFixed","appendChild","handleReLUActivation","finalActivation","inputValues","outputNode","getElementById","useEffect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// NeuralNetwork.js\nimport React, { useState } from 'react';\nimport './NeuralNetwork.css'; // CSS for styling the neural network\nimport { calculateFinalActivation } from './utils'; // Function to calculate final activation\n\nfunction NeuralNetwork() {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150 },\n    // Initial hidden nodes\n    // Format: { id: 'hidden1', x: 300, y: 150 }\n  ]);\n\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = { id, x: 300, y: 150 }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n  };\n\n  const removeHiddenNode = (id) => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n  };\n\n  const handleAnimations = () => {\n    // Implement CSS animations for signal/data flow\n    const svgElements = document.querySelectorAll('.signal-flow');\n    svgElements.forEach(element => {\n      element.style.animation = 'flowAnimation 2s linear infinite';\n    });\n  };\n\n  const handleEdgeWeights = () => {\n    // Implement displaying edge weights\n    const svg = document.querySelector('svg');\n    edges.forEach(edge => {\n      const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n      text.setAttribute(\"x\", (edge.sourceX + edge.targetX) / 2);\n      text.setAttribute(\"y\", (edge.sourceY + edge.targetY) / 2);\n      text.setAttribute(\"fill\", \"black\");\n      text.textContent = edge.weight.toFixed(2); // Assuming edge.weight contains weight value\n      svg.appendChild(text);\n    });\n  };\n\n  const handleReLUActivation = () => {\n    // Implement ReLU activation for the output node\n    const finalActivation = calculateFinalActivation(inputValues, hiddenNodes);\n    const outputNode = document.getElementById('outputNode');\n    outputNode.textContent = `Activation: ${finalActivation}`; // Update text content of output node\n  };\n\n  // Call functions when component mounts\n  useEffect(() => {\n    handleAnimations();\n    handleEdgeWeights();\n    handleReLUActivation();\n  }, []); // Empty dependency array to run once on mount\n\n  return (\n    <div className=\"NeuralNetwork\">\n      {/* Render the neural network visualization */}\n      <svg>\n        {/* SVG elements for nodes, edges, animations, etc. */}\n      </svg>\n      {/* Button to add hidden node */}\n      <button onClick={addHiddenNode}>Add Hidden Node</button>\n      {/* Button to remove hidden node */}\n      {hiddenNodes.map(node => (\n        <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n      ))}\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}