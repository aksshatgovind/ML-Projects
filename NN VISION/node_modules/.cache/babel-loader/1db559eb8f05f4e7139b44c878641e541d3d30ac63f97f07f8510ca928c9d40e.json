{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues) => {\n    const value = edges.filter(edge => edge.target === hiddenNode.id).reduce((acc, edge) => {\n      const inputValue = inputNodeValues[edge.source];\n      const weight = edge.weight;\n      return acc + inputValue * weight;\n    }, 0);\n    return value;\n  };\n  useEffect(() => {\n    // Update input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({\n      ...prevState,\n      activation\n    }));\n\n    // Calculate hidden node values\n    const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n      const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues);\n      return {\n        ...hiddenNode,\n        value\n      };\n    });\n    setHiddenNodes(updatedHiddenNodes);\n  }, [inputNodeValues, hiddenNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"Perceptron\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"1200\",\n      height: \"800\",\n      children: [[...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 130,\n          y1: (i + 1) * 210,\n          x2: 370,\n          y2: (j + 1) * 175,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (130 + 350) / 2 - 1,\n          y: (i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)]\n      }, `input-hidden-${i}-${j}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this))), [...Array(4).keys()].map(index => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 429,\n          y1: (index + 1) * 176,\n          x2: 619,\n          y2: 400,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (400 + 650) / 2 - 10,\n          y: (index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this)]\n      }, `hidden-output-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this)), Object.keys(inputNodeValues).map((input, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 210,\n          r: \"30\",\n          fill: \"green\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `I ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210 + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: inputNodeValues[input]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this)]\n      }, input, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)), hiddenNodes.map((node, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: node.x + 100,\n          cy: node.y * 1.8 - 105,\n          r: \"30\",\n          fill: \"blue\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x + 100,\n          y: node.y * 1.8 - 105,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `H ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x + 100,\n          y: node.y * 1.8 - 55,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: node.value.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 5\n        }, this)]\n      }, `hidden-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 3\n      }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 650,\n          cy: 400,\n          r: \"30\",\n          fill: \"red\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 650,\n          y: 400,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: \"Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 5\n        }, this)]\n      }, `output`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"10\",\n        refX: \"8\",\n        refY: \"3\",\n        orient: \"auto\",\n        fill: \"black\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3, 0 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"jh5AH2OK8l/gCoC+P9Pi42lGpAA=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","outputNode","setOutputNode","activation","inputNodeValues","setInputNodeValues","input1","input2","input3","calculateHiddenNodeValue","hiddenNode","value","edges","filter","edge","target","reduce","acc","inputValue","source","weight","prevState","updatedHiddenNodes","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","Array","keys","i","j","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","type","style","index","Object","input","cx","cy","r","fill","opacity","textAnchor","alignmentBaseline","node","toFixed","markerWidth","markerHeight","refX","refY","orient","points","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150 },\n    { id: 'hidden2', x: 300, y: 250 },\n    { id: 'hidden3', x: 300, y: 350 },\n    { id: 'hidden4', x: 300, y: 450 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0 }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues) => {\n    const value = edges\n      .filter(edge => edge.target === hiddenNode.id)\n      .reduce((acc, edge) => {\n        const inputValue = inputNodeValues[edge.source];\n        const weight = edge.weight;\n        return acc + inputValue * weight;\n      }, 0);\n    return value;\n  };\n\n  useEffect(() => {\n    // Update input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({ ...prevState, activation }));\n\n    // Calculate hidden node values\n    const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n      const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues);\n      return { ...hiddenNode, value };\n    });\n    setHiddenNodes(updatedHiddenNodes);\n  }, [inputNodeValues, hiddenNodes]);\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">Perceptron</div>\n      <svg width=\"1200\" height=\"800\">\n  {/* Render edges from input nodes to hidden nodes */}\n  {[...Array(3).keys()].map((i) => (\n    [...Array(4).keys()].map((j) => (\n      <g key={`input-hidden-${i}-${j}`}>\n        <line\n          x1={130}\n          y1={(i + 1) * 210}\n          x2={370}\n          y2={(j + 1) * 175}\n          stroke=\"black\"\n          strokeWidth=\"2\"\n          markerEnd=\"url(#arrowhead)\"\n        />\n        <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n          <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n        </foreignObject>\n      </g>\n    ))\n  ))}\n\n  {/* Render edges from hidden nodes to output node */}\n  {[...Array(4).keys()].map((index) => (\n    <g key={`hidden-output-${index}`}>\n      <line\n        x1={429}\n        y1={(index + 1) * 176}\n        x2={619}\n        y2={400}\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        markerEnd=\"url(#arrowhead)\"\n      />\n      <foreignObject x={(400 + 650) / 2 - 10} y={(index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n        <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n      </foreignObject>\n    </g>\n  ))}\n\n  {/* Render input nodes */}\n  {Object.keys(inputNodeValues).map((input, index) => (\n    <g key={input}>\n      <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n      <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n      {/* Display input value dynamically */}\n      <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n    </g>\n  ))}\n\n\n   {/* Render hidden nodes */}\n{hiddenNodes.map((node, index) => (\n  <g key={`hidden-${index}`}>\n    <circle cx={node.x + 100} cy={(node.y*1.8)  - 105} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n    <text x={node.x + 100} y={(node.y*1.8) - 105} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n    {/* Display hidden node value dynamically */}\n    <text x={node.x + 100} y={(node.y * 1.8)  - 55} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n  </g>\n))}\n\n\n\n  {/* Render output node */}\n  <g key={`output`}>\n    <circle cx={650} cy={400} r=\"30\" fill=\"red\" opacity=\"0.96\"/>\n    <text x={650} y={400} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n  </g>\n\n  {/* Arrowhead marker */}\n  <marker\n    id=\"arrowhead\"\n    markerWidth=\"10\"\n    markerHeight=\"10\"\n    refX=\"8\"\n    refY=\"3\"\n    orient=\"auto\"\n    fill=\"black\"\n  >\n    <polygon points=\"0 0, 10 3, 0 6\" />\n  </marker>\n</svg>\n\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}