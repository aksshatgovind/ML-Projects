{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150,\n    value: 0\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250,\n    value: 0\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350,\n    value: 0\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450,\n    value: 0\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0,\n    color: 'red'\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n    const weights = [];\n    for (let i = 0; i < 4; i++) {\n      weights.push(Array(3).fill(0)); // Initialize each row with 3 weights with default value 0\n    }\n    return weights;\n  });\n  const [edges, setEdges] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n  const [outputNodeValue, setOutputNodeValue] = useState(0);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < 3; j++) {\n        const source = `input${j + 1}`;\n        const weight = inputToHiddenWeights[i][j]; // Use the weight from inputToHiddenWeights\n        edges.push({\n          source,\n          target,\n          weight\n        });\n      }\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges.filter(edge => edge.target === hiddenNode.id).reduce((acc, edge) => {\n      const inputValue = inputNodeValues[edge.source];\n      const weight = edge.weight;\n      return acc + inputValue * weight;\n    }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  // Function to calculate the value of the output node\n  const calculateOutputNodeValue = () => {\n    const summation = hiddenNodes.reduce((acc, hiddenNode) => {\n      const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n      return acc + hiddenNode.value * weight;\n    }, 0);\n    // Apply activation function if needed\n    return Math.max(0, summation); // Apply ReLU activation function\n  };\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n        return {\n          ...hiddenNode,\n          value\n        };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n  useEffect(() => {\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes, inputToHiddenWeights]);\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [inputName]: parseFloat(e.target.value)\n    }));\n  };\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n  const handleWeightChange = (e, rowIndex, colIndex) => {\n    const newWeights = [...inputToHiddenWeights];\n    newWeights[rowIndex][colIndex] = parseFloat(e.target.value);\n    setInputToHiddenWeights(newWeights);\n  };\n  const handleOutputCalculation = () => {\n    const outputValue = calculateOutputNodeValue();\n    setOutputNodeValue(outputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"Perceptron\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"1200\",\n      height: \"800\",\n      children: [[...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 130,\n          y1: (i + 1) * 210,\n          x2: 370,\n          y2: (j + 1) * 175,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (130 + 350) / 2 - 1,\n          y: (i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            },\n            value: inputToHiddenWeights[j][i] // Adjusted indexing for weights array\n            ,\n            onChange: e => handleWeightChange(e, j, i) // Pass rowIndex and colIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)]\n      }, `input-hidden-${i}-${j}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this))), [...Array(4).keys()].map(index => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 429,\n          y1: (index + 1) * 176,\n          x2: 619,\n          y2: 400,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (400 + 650) / 2 - 10,\n          y: (index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-output-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)), Object.keys(inputNodeValues).map((input, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 210,\n          r: \"30\",\n          fill: \"green\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `I ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210 + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: inputNodeValues[input]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, input, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)), hiddenNodes.map((node, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: node.x,\n          cy: node.y,\n          r: \"30\",\n          fill: \"blue\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `H ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y + 40,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: node.value.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: outputNode.x,\n          cy: outputNode.y,\n          r: \"30\",\n          fill: outputNode.color,\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x,\n          y: outputNode.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: \"Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x,\n          y: outputNode.y + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: outputNodeValue.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, `output`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"9\",\n        markerHeight: \"8\",\n        refX: \"8\",\n        refY: \"3\",\n        orient: \"auto\",\n        fill: \"black\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3, 0 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [!inputsComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInputComplete,\n        children: \"Calculate Hidden Values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 29\n      }, this), inputsComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOutputCalculation,\n        children: \"Calculate Output Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"8dky4ONRwd8PCPXPALvOakIIONY=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","value","outputNode","setOutputNode","activation","color","inputNodeValues","setInputNodeValues","input1","input2","input3","inputToHiddenWeights","setInputToHiddenWeights","weights","i","push","Array","fill","edges","setEdges","inputsComplete","setInputsComplete","outputNodeValue","setOutputNodeValue","generateRandomEdges","length","target","j","source","weight","calculateHiddenNodeValue","hiddenNode","filter","edge","reduce","acc","inputValue","calculateOutputNodeValue","summation","Math","random","max","updatedHiddenNodes","map","index","handleInputChange","e","inputName","prevState","parseFloat","handleInputComplete","handleWeightChange","rowIndex","colIndex","newWeights","handleOutputCalculation","outputValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","keys","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","type","style","onChange","Object","input","cx","cy","r","opacity","textAnchor","alignmentBaseline","node","toFixed","markerWidth","markerHeight","refX","refY","orient","points","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150, value: 0 },\n    { id: 'hidden2', x: 300, y: 250, value: 0 },\n    { id: 'hidden3', x: 300, y: 350, value: 0 },\n    { id: 'hidden4', x: 300, y: 450, value: 0 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0, color: 'red' }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n    const weights = [];\n    for (let i = 0; i < 4; i++) {\n      weights.push(Array(3).fill(0)); // Initialize each row with 3 weights with default value 0\n    }\n    return weights;\n  });\n  const [edges, setEdges] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n  const [outputNodeValue, setOutputNodeValue] = useState(0);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < 3; j++) {\n        const source = `input${j + 1}`;\n        const weight = inputToHiddenWeights[i][j]; // Use the weight from inputToHiddenWeights\n        edges.push({ source, target, weight });\n      }\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges\n      .filter(edge => edge.target === hiddenNode.id)\n      .reduce((acc, edge) => {\n        const inputValue = inputNodeValues[edge.source];\n        const weight = edge.weight;\n        return acc + inputValue * weight;\n      }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  // Function to calculate the value of the output node\n  const calculateOutputNodeValue = () => {\n    const summation = hiddenNodes.reduce((acc, hiddenNode) => {\n      const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n      return acc + hiddenNode.value * weight;\n    }, 0);\n    // Apply activation function if needed\n    return Math.max(0, summation); // Apply ReLU activation function\n  };\n\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n        return { ...hiddenNode, value };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n\n  useEffect(() => {\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes, inputToHiddenWeights]);\n\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({ ...prevState, [inputName]: parseFloat(e.target.value) }));\n  };\n\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n\n  const handleWeightChange = (e, rowIndex, colIndex) => {\n    const newWeights = [...inputToHiddenWeights];\n    newWeights[rowIndex][colIndex] = parseFloat(e.target.value);\n    setInputToHiddenWeights(newWeights);\n  };\n\n  const handleOutputCalculation = () => {\n    const outputValue = calculateOutputNodeValue();\n    setOutputNodeValue(outputValue);\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">Perceptron</div>\n      <svg width=\"1200\" height=\"800\">\n        {/* Render edges from input nodes to hidden nodes */}\n        {[...Array(3).keys()].map((i) => (\n          [...Array(4).keys()].map((j) => (\n            <g key={`input-hidden-${i}-${j}`}>\n              <line\n                x1={130}\n                y1={(i + 1) * 210}\n                x2={370}\n                y2={(j + 1) * 175}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                markerEnd=\"url(#arrowhead)\"\n              />\n              <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n                <input\n                  type=\"number\"\n                  style={{ width: \"20px\", height: \"20px\" }}\n                  value={inputToHiddenWeights[j][i]} // Adjusted indexing for weights array\n                  onChange={(e) => handleWeightChange(e, j, i)} // Pass rowIndex and colIndex\n                />\n              </foreignObject>\n            </g>\n          ))\n        ))}\n\n        {/* Render edges from hidden nodes to output node */}\n        {[...Array(4).keys()].map((index) => (\n          <g key={`hidden-output-${index}`}>\n            <line\n              x1={429}\n              y1={(index + 1) * 176}\n              x2={619}\n              y2={400}\n              stroke=\"black\"\n              strokeWidth=\"2\"\n              markerEnd=\"url(#arrowhead)\"\n            />\n            <foreignObject x={(400 + 650) / 2 - 10} y={(index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n              <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n            </foreignObject>\n          </g>\n        ))}\n\n        {/* Render input nodes */}\n        {Object.keys(inputNodeValues).map((input, index) => (\n          <g key={input}>\n            <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n            <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n            {/* Display input value dynamically */}\n            <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n          </g>\n        ))}\n\n        {/* Render hidden nodes */}\n        {hiddenNodes.map((node, index) => (\n          <g key={`hidden-${index}`}>\n            <circle cx={node.x} cy={node.y} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n            <text x={node.x} y={node.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n            {/* Display hidden node value dynamically */}\n            <text x={node.x} y={node.y + 40} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n          </g>\n        ))}\n\n        {/* Render output node */}\n        <g key={`output`}>\n          <circle cx={outputNode.x} cy={outputNode.y} r=\"30\" fill={outputNode.color} opacity=\"0.96\"/>\n          <text x={outputNode.x} y={outputNode.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n          {/* Display output value dynamically rounded to 2 decimal places */}\n          <text x={outputNode.x} y={outputNode.y + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">\n            {outputNodeValue.toFixed(2)}\n          </text>\n        </g>\n\n        {/* Arrowhead marker */}\n        <marker\n          id=\"arrowhead\"\n          markerWidth=\"9\"\n          markerHeight=\"8\"\n          refX=\"8\"\n          refY=\"3\"\n          orient=\"auto\"\n          fill=\"black\"\n        >\n          <polygon points=\"0 0, 10 3, 0 6\" />\n        </marker>\n        \n\n      </svg>\n      <div className=\"buttons\">\n        {!inputsComplete && <button onClick={handleInputComplete}>Calculate Hidden Values</button>}\n        {inputsComplete && <button onClick={handleOutputCalculation}>Calculate Output Value</button>}\n      </div>\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}