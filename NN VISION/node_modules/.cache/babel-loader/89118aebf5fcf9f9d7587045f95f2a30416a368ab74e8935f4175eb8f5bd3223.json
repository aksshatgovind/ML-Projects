{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\n// NeuralNetwork.js\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  // Generate random hidden nodes and edges for testing purposes\n  const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n  const [edges, setEdges] = useState(generateRandomEdges());\n  function generateRandomHiddenNodes() {\n    const numNodes = Math.floor(Math.random() * 5) + 1; // Generate between 1 to 5 hidden nodes\n    const nodes = [];\n    for (let i = 0; i < numNodes; i++) {\n      nodes.push({\n        id: `hidden${i + 1}`,\n        x: Math.random() * 500,\n        y: Math.random() * 300\n      });\n    }\n    return nodes;\n  }\n  function generateRandomEdges() {\n    const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length; // Generate edges between input and hidden nodes\n    const edges = [];\n    const inputNodeIds = Object.keys(inputValues);\n    for (let i = 0; i < numEdges; i++) {\n      const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)]; // Random input node\n      const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`; // Random hidden node\n      const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n      edges.push({\n        source,\n        target,\n        weight\n      });\n    }\n    return edges;\n  }\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = {\n      id,\n      x: 300,\n      y: 150\n    }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n\n    // Add edges from input nodes to new hidden node\n    const newEdges = inputValues.map((inputValue, index) => ({\n      source: `input${index + 1}`,\n      target: id,\n      weight: inputValue // Set weight as input value\n    }));\n    setEdges(prevEdges => [...prevEdges, ...newEdges]);\n  };\n\n  // Handle input values change to update weights of edges from input nodes to hidden nodes\n  useEffect(() => {\n    const updatedEdges = edges.map(edge => {\n      if (edge.target.startsWith('hidden')) {\n        const inputValue = inputValues[parseInt(edge.source.replace('input', '')) - 1];\n        return {\n          ...edge,\n          weight: inputValue\n        };\n      }\n      return edge;\n    });\n    setEdges(updatedEdges);\n  }, [inputValues]);\n  const removeHiddenNode = id => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n    // Remove edges connected to the removed hidden node\n    setEdges(edges.filter(edge => edge.target !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      children: [inputValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: 50,\n        cy: 50 * (index + 1),\n        r: 10,\n        fill: \"blue\"\n      }, `input${index + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: 10,\n        fill: \"green\"\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 50,\n        y1: 50 * parseInt(edge.source.replace('input', '')),\n        x2: node.x,\n        y2: node.y,\n        stroke: \"black\"\n      }, `edge${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 100,\n        y: 100,\n        fill: \"black\",\n        children: \"Output Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHiddenNode,\n      children: \"Add Hidden Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeHiddenNode(node.id),\n      children: [\"Remove \", node.id]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"3YUFG6T9DphNjypmbWZbfU1pBo8=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","generateRandomHiddenNodes","edges","setEdges","generateRandomEdges","numNodes","Math","floor","random","nodes","i","push","id","x","y","numEdges","length","inputNodeIds","Object","keys","source","target","weight","addHiddenNode","newNode","newEdges","map","inputValue","index","prevEdges","updatedEdges","edge","startsWith","parseInt","replace","removeHiddenNode","filter","node","className","children","value","cx","cy","r","fill","fileName","_jsxFileName","lineNumber","columnNumber","x1","y1","x2","y2","stroke","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// NeuralNetwork.js\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  // Generate random hidden nodes and edges for testing purposes\n  const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n  const [edges, setEdges] = useState(generateRandomEdges());\n\n  function generateRandomHiddenNodes() {\n    const numNodes = Math.floor(Math.random() * 5) + 1; // Generate between 1 to 5 hidden nodes\n    const nodes = [];\n    for (let i = 0; i < numNodes; i++) {\n      nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n    }\n    return nodes;\n  }\n\n  function generateRandomEdges() {\n    const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length; // Generate edges between input and hidden nodes\n    const edges = [];\n    const inputNodeIds = Object.keys(inputValues);\n    for (let i = 0; i < numEdges; i++) {\n      const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)]; // Random input node\n      const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`; // Random hidden node\n      const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n      edges.push({ source, target, weight });\n    }\n    return edges;\n  }\n\n\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = { id, x: 300, y: 150 }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n\n    // Add edges from input nodes to new hidden node\n    const newEdges = inputValues.map((inputValue, index) => ({\n      source: `input${index + 1}`,\n      target: id,\n      weight: inputValue, // Set weight as input value\n    }));\n    setEdges(prevEdges => [...prevEdges, ...newEdges]);\n  };\n\n  // Handle input values change to update weights of edges from input nodes to hidden nodes\n  useEffect(() => {\n    const updatedEdges = edges.map(edge => {\n      if (edge.target.startsWith('hidden')) {\n        const inputValue = inputValues[parseInt(edge.source.replace('input', '')) - 1];\n        return { ...edge, weight: inputValue };\n      }\n      return edge;\n    });\n    setEdges(updatedEdges);\n  }, [inputValues]);\n\n  const removeHiddenNode = (id) => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n    // Remove edges connected to the removed hidden node\n    setEdges(edges.filter(edge => edge.target !== id));\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      {/* Render the neural network visualization */}\n      <svg>\n        {/* Render input nodes */}\n        {inputValues.map((value, index) => (\n          <circle key={`input${index + 1}`} cx={50} cy={50 * (index + 1)} r={10} fill=\"blue\" />\n        ))}\n        {/* Render hidden nodes */}\n        {hiddenNodes.map(node => (\n          <circle key={node.id} cx={node.x} cy={node.y} r={10} fill=\"green\" />\n        ))}\n        {/* Render edges */}\n        {edges.map((edge, index) => (\n          <line key={`edge${index}`} x1={50} y1={50 * parseInt(edge.source.replace('input', ''))} x2={node.x} y2={node.y} stroke=\"black\" />\n        ))}\n        {/* Render output node */}\n        <text x={100} y={100} fill=\"black\">Output Node</text>\n      </svg>\n      {/* Button to add hidden node */}\n      <button onClick={addHiddenNode}>Add Hidden Node</button>\n      {/* Button to remove hidden node */}\n      {hiddenNodes.map(node => (\n        <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n      ))}\n    </div>\n  );\n}\n\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}