{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150,\n    value: 0\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250,\n    value: 0\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350,\n    value: 0\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450,\n    value: 0\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0,\n    color: 'red'\n  }); // Output node\n\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n\n  // Function to generate random weights for input to hidden edges\n  const generateRandomWeights = () => {\n    const weights = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        weights.push(weight);\n      }\n    }\n    return weights;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputValues, weights) => {\n    const value = inputValues.reduce((acc, inputValue, index) => {\n      const weight = weights[index];\n      return acc + inputValue * weight;\n    }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n        const weightsForNode = inputToHiddenWeights.slice(index * Object.keys(inputNodeValues).length, (index + 1) * Object.keys(inputNodeValues).length);\n        const value = calculateHiddenNodeValue(hiddenNode, Object.values(inputNodeValues), weightsForNode);\n        return {\n          ...hiddenNode,\n          value\n        };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, inputToHiddenWeights, hiddenNodes]);\n  useEffect(() => {\n    // Generate random weights whenever input values or hidden nodes change\n    setInputToHiddenWeights(generateRandomWeights());\n  }, [inputNodeValues, hiddenNodes]);\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [inputName]: parseFloat(e.target.value)\n    }));\n  };\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n  const handleWeightChange = (e, i, j) => {\n    const newWeight = parseFloat(e.target.value);\n    const updatedWeights = inputToHiddenWeights.map((row, rowIndex) => {\n      if (rowIndex === j) {\n        return row.map((weight, colIndex) => {\n          if (colIndex === i) {\n            return newWeight;\n          }\n          return weight;\n        });\n      }\n      return row;\n    });\n    setInputToHiddenWeights(updatedWeights);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"Perceptron\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"1200\",\n      height: \"800\",\n      children: [[...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 130,\n          y1: (i + 1) * 210,\n          x2: 370,\n          y2: (j + 1) * 175,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (130 + 350) / 2 - 1,\n          y: (i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            },\n            value: 0 // Set default value to 0\n            ,\n            onChange: e => handleWeightChange(e, i, j) // Pass i and j to identify the weight to be changed\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this)]\n      }, `input-hidden-${i}-${j}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this))), [...Array(4).keys()].map(index => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 429,\n          y1: (index + 1) * 176,\n          x2: 619,\n          y2: 400,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (400 + 650) / 2 - 10,\n          y: (index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-output-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)), Object.keys(inputNodeValues).map((input, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 210,\n          r: \"30\",\n          fill: \"green\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `I ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210 + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: inputNodeValues[input]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, input, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)), hiddenNodes.map((node, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: node.x,\n          cy: node.y,\n          r: \"30\",\n          fill: \"blue\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `H ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y + 40,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: node.value.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: outputNode.x,\n          cy: outputNode.y,\n          r: \"30\",\n          fill: outputNode.color,\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x,\n          y: outputNode.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: \"Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x,\n          y: outputNode.y + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: outputNode.activation.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, `output`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"10\",\n        refX: \"8\",\n        refY: \"3\",\n        orient: \"auto\",\n        fill: \"black\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3, 0 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), !inputsComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInputComplete,\n      children: \"Complete Inputs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"w690ziHLqitJTxmUOQOqtbW5SiY=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","value","outputNode","setOutputNode","activation","color","inputNodeValues","setInputNodeValues","input1","input2","input3","inputToHiddenWeights","setInputToHiddenWeights","inputsComplete","setInputsComplete","generateRandomWeights","weights","inputNodeIds","Object","keys","i","length","j","weight","Math","random","push","calculateHiddenNodeValue","hiddenNode","reduce","acc","inputValue","index","updatedHiddenNodes","map","weightsForNode","slice","values","handleInputChange","e","inputName","prevState","parseFloat","target","handleInputComplete","handleWeightChange","newWeight","updatedWeights","row","rowIndex","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","Array","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","type","style","onChange","input","cx","cy","r","fill","opacity","textAnchor","alignmentBaseline","node","toFixed","markerWidth","markerHeight","refX","refY","orient","points","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150, value: 0 },\n    { id: 'hidden2', x: 300, y: 250, value: 0 },\n    { id: 'hidden3', x: 300, y: 350, value: 0 },\n    { id: 'hidden4', x: 300, y: 450, value: 0 },\n    // Default hidden nodes\n  ]);\n\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0, color: 'red' }); // Output node\n\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState([]);\n\n  const [inputsComplete, setInputsComplete] = useState(false);\n\n  // Function to generate random weights for input to hidden edges\n  const generateRandomWeights = () => {\n    const weights = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        weights.push(weight);\n      }\n    }\n    return weights;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputValues, weights) => {\n    const value = inputValues.reduce((acc, inputValue, index) => {\n      const weight = weights[index];\n      return acc + inputValue * weight;\n    }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n        const weightsForNode = inputToHiddenWeights.slice(index * Object.keys(inputNodeValues).length, (index + 1) * Object.keys(inputNodeValues).length);\n        const value = calculateHiddenNodeValue(hiddenNode, Object.values(inputNodeValues), weightsForNode);\n        return { ...hiddenNode, value };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, inputToHiddenWeights, hiddenNodes]);\n\n  useEffect(() => {\n    // Generate random weights whenever input values or hidden nodes change\n    setInputToHiddenWeights(generateRandomWeights());\n  }, [inputNodeValues, hiddenNodes]);\n\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({ ...prevState, [inputName]: parseFloat(e.target.value) }));\n  };\n\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n\n  const handleWeightChange = (e, i, j) => {\n    const newWeight = parseFloat(e.target.value);\n    const updatedWeights = inputToHiddenWeights.map((row, rowIndex) => {\n      if (rowIndex === j) {\n        return row.map((weight, colIndex) => {\n          if (colIndex === i) {\n            return newWeight;\n          }\n          return weight;\n        });\n      }\n      return row;\n    });\n    setInputToHiddenWeights(updatedWeights);\n  };\n  \n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">Perceptron</div>\n      <svg width=\"1200\" height=\"800\">\n        {/* Render edges from input nodes to hidden nodes */}\n        {[...Array(3).keys()].map((i) => (\n          [...Array(4).keys()].map((j) => (\n            <g key={`input-hidden-${i}-${j}`}>\n              <line\n                x1={130}\n                y1={(i + 1) * 210}\n                x2={370}\n                y2={(j + 1) * 175}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                markerEnd=\"url(#arrowhead)\"\n              />\n              <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n                <input \n                  type=\"number\" \n                  style={{ width: \"20px\", height: \"20px\" }} \n                  value={0} // Set default value to 0\n                  onChange={(e) => handleWeightChange(e, i, j)} // Pass i and j to identify the weight to be changed\n                />\n              </foreignObject>\n            </g>\n          ))\n        ))}\n\n        {/* Render edges from hidden nodes to output node */}\n        {[...Array(4).keys()].map((index) => (\n          <g key={`hidden-output-${index}`}>\n            <line\n              x1={429}\n              y1={(index + 1) * 176}\n              x2={619}\n              y2={400}\n              stroke=\"black\"\n              strokeWidth=\"2\"\n              markerEnd=\"url(#arrowhead)\"\n            />\n            <foreignObject x={(400 + 650) / 2 - 10} y={(index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n              <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n            </foreignObject>\n          </g>\n        ))}\n\n        {/* Render input nodes */}\n        {Object.keys(inputNodeValues).map((input, index) => (\n          <g key={input}>\n            <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n            <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n            {/* Display input value dynamically */}\n            <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n          </g>\n        ))}\n\n        {/* Render hidden nodes */}\n        {hiddenNodes.map((node, index) => (\n          <g key={`hidden-${index}`}>\n            <circle cx={node.x} cy={node.y} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n            <text x={node.x} y={node.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n            {/* Display hidden node value dynamically */}\n            <text x={node.x} y={node.y + 40} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n          </g>\n        ))}\n\n        {/* Render output node */}\n        <g key={`output`}>\n          <circle cx={outputNode.x} cy={outputNode.y} r=\"30\" fill={outputNode.color} opacity=\"0.96\"/>\n          <text x={outputNode.x} y={outputNode.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n          {/* Display output value dynamically rounded to 2 decimal places */}\n          <text x={outputNode.x} y={outputNode.y + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">\n            {outputNode.activation.toFixed(2)}\n          </text>\n        </g>\n\n        {/* Arrowhead marker */}\n        <marker\n          id=\"arrowhead\"\n          markerWidth=\"10\"\n          markerHeight=\"10\"\n          refX=\"8\"\n          refY=\"3\"\n          orient=\"auto\"\n          fill=\"black\"\n        >\n          <polygon points=\"0 0, 10 3, 0 6\" />\n        </marker>\n      </svg>\n\n      {!inputsComplete && <button onClick={handleInputComplete}>Complete Inputs</button>}\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}