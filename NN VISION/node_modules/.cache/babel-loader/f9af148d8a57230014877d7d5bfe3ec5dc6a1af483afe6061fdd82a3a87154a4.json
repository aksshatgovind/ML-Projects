{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150,\n    value: 0\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250,\n    value: 0\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350,\n    value: 0\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450,\n    value: 0\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0,\n    color: 'red'\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [edges, setEdges] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({\n          source,\n          target,\n          weight\n        });\n      }\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges.filter(edge => edge.target === hiddenNode.id).reduce((acc, edge) => {\n      const inputValue = inputNodeValues[edge.source];\n      const weight = edge.weight;\n      return acc + inputValue * weight;\n    }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n        return {\n          ...hiddenNode,\n          value\n        };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n  useEffect(() => {\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes]);\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [inputName]: parseFloat(e.target.value)\n    }));\n  };\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"Perceptron\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"1200\",\n      height: \"800\",\n      children: [[...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 130,\n          y1: (i + 1) * 210,\n          x2: 370,\n          y2: (j + 1) * 175,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (130 + 350) / 2 - 1,\n          y: (i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            },\n            value: inputNodeValues[`input${i + 1}`],\n            onChange: e => handleInputChange(e, `input${i + 1}`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this)]\n      }, `input-hidden-${i}-${j}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this))), hiddenNodes.map((hiddenNode, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 429,\n          y1: hiddenNode.y,\n          x2: 619,\n          y2: 400,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (400 + 650) / 2 - 10,\n          y: hiddenNode.y + 40,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            },\n            value: edges[index].weight,\n            onChange: e => handleWeightChange(e, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-output-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)), Object.keys(inputNodeValues).map((input, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 210,\n          r: \"30\",\n          fill: \"green\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `I ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210 + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: inputNodeValues[input]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, input, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)), hiddenNodes.map((node, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: node.x,\n          cy: node.y,\n          r: \"30\",\n          fill: \"blue\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `H ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y + 40,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: node.value.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: outputNode.x,\n          cy: outputNode.y,\n          r: \"30\",\n          fill: outputNode.color,\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x,\n          y: outputNode.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: \"Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x,\n          y: outputNode.y + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: outputNode.activation.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, `output`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"10\",\n        refX: \"8\",\n        refY: \"3\",\n        orient: \"auto\",\n        fill: \"black\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3, 0 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), !inputsComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInputComplete,\n      children: \"Complete Inputs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"Jcip67rYeVYPN95esLBF2OcxwUs=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","value","outputNode","setOutputNode","activation","color","inputNodeValues","setInputNodeValues","input1","input2","input3","edges","setEdges","inputsComplete","setInputsComplete","generateRandomEdges","inputNodeIds","Object","keys","i","length","target","j","source","weight","Math","random","push","calculateHiddenNodeValue","hiddenNode","filter","edge","reduce","acc","inputValue","updatedHiddenNodes","map","handleInputChange","e","inputName","prevState","parseFloat","handleInputComplete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","Array","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","type","style","onChange","index","handleWeightChange","input","cx","cy","r","fill","opacity","textAnchor","alignmentBaseline","node","toFixed","markerWidth","markerHeight","refX","refY","orient","points","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150, value: 0 },\n    { id: 'hidden2', x: 300, y: 250, value: 0 },\n    { id: 'hidden3', x: 300, y: 350, value: 0 },\n    { id: 'hidden4', x: 300, y: 450, value: 0 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0, color: 'red' }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n  const [edges, setEdges] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({ source, target, weight });\n      }\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges\n      .filter(edge => edge.target === hiddenNode.id)\n      .reduce((acc, edge) => {\n        const inputValue = inputNodeValues[edge.source];\n        const weight = edge.weight;\n        return acc + inputValue * weight;\n      }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n        return { ...hiddenNode, value };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n\n  useEffect(() => {\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes]);\n\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({ ...prevState, [inputName]: parseFloat(e.target.value) }));\n  };\n\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">Perceptron</div>\n      <svg width=\"1200\" height=\"800\">\n        {/* Render edges from input nodes to hidden nodes */}\n        {[...Array(3).keys()].map((i) => (\n          [...Array(4).keys()].map((j) => (\n            <g key={`input-hidden-${i}-${j}`}>\n              <line\n                x1={130}\n                y1={(i + 1) * 210}\n                x2={370}\n                y2={(j + 1) * 175}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                markerEnd=\"url(#arrowhead)\"\n              />\n              <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n                <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} value={inputNodeValues[`input${i + 1}`]} onChange={(e) => handleInputChange(e, `input${i + 1}`)} />\n              </foreignObject>\n            </g>\n          ))\n        ))}\n\n        {/* Render edges from hidden nodes to output node */}\n        {hiddenNodes.map((hiddenNode, index) => (\n          <g key={`hidden-output-${index}`}>\n            <line\n              x1={429}\n              y1={hiddenNode.y}\n              x2={619}\n              y2={400}\n              stroke=\"black\"\n              strokeWidth=\"2\"\n              markerEnd=\"url(#arrowhead)\"\n            />\n            <foreignObject x={(400 + 650) / 2 - 10} y={hiddenNode.y + 40} width=\"20\" height=\"20\">\n              <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} value={edges[index].weight} onChange={(e) => handleWeightChange(e, index)} />\n            </foreignObject>\n          </g>\n        ))}\n\n        {/* Render input nodes */}\n        {Object.keys(inputNodeValues).map((input, index) => (\n          <g key={input}>\n            <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n            <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n            {/* Display input value dynamically */}\n            <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n          </g>\n        ))}\n\n        {/* Render hidden nodes */}\n        {hiddenNodes.map((node, index) => (\n          <g key={`hidden-${index}`}>\n            <circle cx={node.x} cy={node.y} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n            <text x={node.x} y={node.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n            {/* Display hidden node value dynamically */}\n            <text x={node.x} y={node.y + 40} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n          </g>\n        ))}\n\n        {/* Render output node */}\n        <g key={`output`}>\n          <circle cx={outputNode.x} cy={outputNode.y} r=\"30\" fill={outputNode.color} opacity=\"0.96\"/>\n          <text x={outputNode.x} y={outputNode.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n          {/* Display output value dynamically rounded to 2 decimal places */}\n          <text x={outputNode.x} y={outputNode.y + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">\n            {outputNode.activation.toFixed(2)}\n          </text>\n        </g>\n\n        {/* Arrowhead marker */}\n        <marker\n          id=\"arrowhead\"\n          markerWidth=\"10\"\n          markerHeight=\"10\"\n          refX=\"8\"\n          refY=\"3\"\n          orient=\"auto\"\n          fill=\"black\"\n        >\n          <polygon points=\"0 0, 10 3, 0 6\" />\n        </marker>\n      </svg>\n\n      {!inputsComplete && <button onClick={handleInputComplete}>Complete Inputs</button>}\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}