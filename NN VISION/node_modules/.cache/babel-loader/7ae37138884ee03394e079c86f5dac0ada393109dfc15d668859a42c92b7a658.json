{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\n// NeuralNetwork.js\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  // Generate random hidden nodes and edges for testing purposes\n  const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n  const [edges, setEdges] = useState(generateRandomEdges());\n  const [finalActivation, setFinalActivation] = useState(0);\n  function generateRandomHiddenNodes() {\n    const numNodes = Math.floor(Math.random() * 5) + 1; // Generate between 1 to 5 hidden nodes\n    const nodes = [];\n    for (let i = 0; i < numNodes; i++) {\n      nodes.push({\n        id: `hidden${i + 1}`,\n        x: Math.random() * 500,\n        y: Math.random() * 300\n      });\n    }\n    return nodes;\n  }\n  function generateRandomEdges() {\n    const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length; // Generate edges between input and hidden nodes\n    const edges = [];\n    const inputNodeIds = Object.keys(inputValues);\n    for (let i = 0; i < numEdges; i++) {\n      const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)]; // Random input node\n      const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`; // Random hidden node\n      const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n      edges.push({\n        source,\n        target,\n        weight\n      });\n    }\n    return edges;\n  }\n  useEffect(() => {\n    // Update hidden nodes and edges whenever inputValues change\n    setHiddenNodes(generateRandomHiddenNodes());\n    setEdges(generateRandomEdges());\n  }, [inputValues]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        id: \"outputNode\",\n        x: \"100\",\n        y: \"100\",\n        fill: \"black\",\n        children: \"Output Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHiddenNode,\n      children: \"Add Hidden Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeHiddenNode(node.id),\n      children: [\"Remove \", node.id]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"VQdi9iwaVFdAIVmk6zhYM5GfPhY=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","generateRandomHiddenNodes","edges","setEdges","generateRandomEdges","finalActivation","setFinalActivation","numNodes","Math","floor","random","nodes","i","push","id","x","y","numEdges","length","inputNodeIds","Object","keys","source","target","weight","className","children","fill","fileName","_jsxFileName","lineNumber","columnNumber","onClick","addHiddenNode","map","node","removeHiddenNode","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// NeuralNetwork.js\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  // Generate random hidden nodes and edges for testing purposes\n  const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n  const [edges, setEdges] = useState(generateRandomEdges());\n  const [finalActivation, setFinalActivation] = useState(0);\n\n  function generateRandomHiddenNodes() {\n    const numNodes = Math.floor(Math.random() * 5) + 1; // Generate between 1 to 5 hidden nodes\n    const nodes = [];\n    for (let i = 0; i < numNodes; i++) {\n      nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n    }\n    return nodes;\n  }\n\n  function generateRandomEdges() {\n    const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length; // Generate edges between input and hidden nodes\n    const edges = [];\n    const inputNodeIds = Object.keys(inputValues);\n    for (let i = 0; i < numEdges; i++) {\n      const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)]; // Random input node\n      const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`; // Random hidden node\n      const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n      edges.push({ source, target, weight });\n    }\n    return edges;\n  }\n\n  useEffect(() => {\n    // Update hidden nodes and edges whenever inputValues change\n    setHiddenNodes(generateRandomHiddenNodes());\n    setEdges(generateRandomEdges());\n  }, [inputValues]);\n\n  return (\n    <div className=\"NeuralNetwork\">\n      {/* Render the neural network visualization */}\n      <svg>\n        {/* SVG elements for nodes, edges, animations, etc. */}\n        {/* Add output node */}\n        <text id=\"outputNode\" x=\"100\" y=\"100\" fill=\"black\">Output Node</text>\n      </svg>\n      {/* Button to add hidden node */}\n      <button onClick={addHiddenNode}>Add Hidden Node</button>\n      {/* Button to remove hidden node */}\n      {hiddenNodes.map(node => (\n        <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n      ))}\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}