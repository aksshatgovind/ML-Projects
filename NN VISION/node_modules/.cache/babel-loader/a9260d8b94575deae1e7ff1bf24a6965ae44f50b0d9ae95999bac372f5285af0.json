{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/PerceptronSVG.js\";\nimport React from 'react';\nimport { SVG, Circle, Line } from 'react-svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Perceptron = () => {\n  const numInputNodes = 3;\n  const numHiddenNodes = 4;\n  const radius = 30; // Adjust the radius as needed\n\n  const getInputNodePositions = () => {\n    const positions = [];\n    const spacing = Math.PI * 2 / (numInputNodes + 1);\n    for (let i = 1; i <= numInputNodes; i++) {\n      positions.push({\n        x: radius * Math.cos(spacing * i) + radius,\n        y: radius * Math.sin(spacing * i) + radius\n      });\n    }\n    return positions;\n  };\n  const getHiddenNodePositions = () => {\n    const positions = [];\n    const spacing = Math.PI * 2 / (numHiddenNodes + 1);\n    const offsetRadius = radius * 2.5; // Adjust offset radius as needed\n    for (let i = 1; i <= numHiddenNodes; i++) {\n      positions.push({\n        x: offsetRadius * Math.cos(spacing * i) + radius,\n        y: offsetRadius * Math.sin(spacing * i) + radius\n      });\n    }\n    return positions;\n  };\n  const getOutputNodePosition = () => ({\n    x: radius * 3,\n    y: radius\n  });\n  const inputNodePositions = getInputNodePositions();\n  const hiddenNodePositions = getHiddenNodePositions();\n  const outputNodePosition = getOutputNodePosition();\n  const renderInputNodes = () => inputNodePositions.map((position, index) => /*#__PURE__*/_jsxDEV(Circle, {\n    cx: position.x,\n    cy: position.y,\n    r: radius,\n    fill: \"lightblue\"\n  }, `input-node-${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this));\n  const renderHiddenNodes = () => hiddenNodePositions.map((position, index) => /*#__PURE__*/_jsxDEV(Circle, {\n    cx: position.x,\n    cy: position.y,\n    r: radius,\n    fill: \"lightgreen\"\n  }, `hidden-node-${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this));\n  const renderEdges = () => {\n    const edges = [];\n    for (let i = 0; i < numInputNodes; i++) {\n      for (let j = 0; j < numHiddenNodes; j++) {\n        const inputPos = inputNodePositions[i];\n        const hiddenPos = hiddenNodePositions[j];\n        edges.push( /*#__PURE__*/_jsxDEV(Line, {\n          x1: inputPos.x,\n          y1: inputPos.y,\n          x2: hiddenPos.x,\n          y2: hiddenPos.y,\n          stroke: \"black\"\n        }, `edge-${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    for (let j = 0; j < numHiddenNodes; j++) {\n      const hiddenPos = hiddenNodePositions[j];\n      const outputPos = outputNodePosition;\n      edges.push( /*#__PURE__*/_jsxDEV(Line, {\n        x1: hiddenPos.x,\n        y1: hiddenPos.y,\n        x2: outputPos.x,\n        y2: outputPos.y,\n        stroke: \"black\"\n      }, `edge-${j}-output`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this));\n    }\n    return edges;\n  };\n  return /*#__PURE__*/_jsxDEV(Svg, {\n    width: 800,\n    height: 600,\n    children: [renderInputNodes(), renderHiddenNodes(), /*#__PURE__*/_jsxDEV(Circle, {\n      cx: outputNodePosition.x,\n      cy: outputNodePosition.y,\n      r: radius,\n      fill: \"pink\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), renderEdges()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_c = Perceptron;\nexport default Perceptron;\nvar _c;\n$RefreshReg$(_c, \"Perceptron\");","map":{"version":3,"names":["React","SVG","Circle","Line","jsxDEV","_jsxDEV","Perceptron","numInputNodes","numHiddenNodes","radius","getInputNodePositions","positions","spacing","Math","PI","i","push","x","cos","y","sin","getHiddenNodePositions","offsetRadius","getOutputNodePosition","inputNodePositions","hiddenNodePositions","outputNodePosition","renderInputNodes","map","position","index","cx","cy","r","fill","fileName","_jsxFileName","lineNumber","columnNumber","renderHiddenNodes","renderEdges","edges","j","inputPos","hiddenPos","x1","y1","x2","y2","stroke","outputPos","Svg","width","height","children","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/PerceptronSVG.js"],"sourcesContent":["import React from 'react';\nimport { SVG, Circle, Line } from 'react-svg';\n\nconst Perceptron = () => {\n  const numInputNodes = 3;\n  const numHiddenNodes = 4;\n  const radius = 30; // Adjust the radius as needed\n\n  const getInputNodePositions = () => {\n    const positions = [];\n    const spacing = Math.PI * 2 / (numInputNodes + 1);\n    for (let i = 1; i <= numInputNodes; i++) {\n      positions.push({\n        x: radius * Math.cos(spacing * i) + radius,\n        y: radius * Math.sin(spacing * i) + radius,\n      });\n    }\n    return positions;\n  };\n\n  const getHiddenNodePositions = () => {\n    const positions = [];\n    const spacing = Math.PI * 2 / (numHiddenNodes + 1);\n    const offsetRadius = radius * 2.5; // Adjust offset radius as needed\n    for (let i = 1; i <= numHiddenNodes; i++) {\n      positions.push({\n        x: offsetRadius * Math.cos(spacing * i) + radius,\n        y: offsetRadius * Math.sin(spacing * i) + radius,\n      });\n    }\n    return positions;\n  };\n\n  const getOutputNodePosition = () => ({\n    x: radius * 3,\n    y: radius,\n  });\n\n  const inputNodePositions = getInputNodePositions();\n  const hiddenNodePositions = getHiddenNodePositions();\n  const outputNodePosition = getOutputNodePosition();\n\n  const renderInputNodes = () =>\n    inputNodePositions.map((position, index) => (\n      <Circle\n        key={`input-node-${index}`}\n        cx={position.x}\n        cy={position.y}\n        r={radius}\n        fill=\"lightblue\"\n      />\n    ));\n\n  const renderHiddenNodes = () =>\n    hiddenNodePositions.map((position, index) => (\n      <Circle\n        key={`hidden-node-${index}`}\n        cx={position.x}\n        cy={position.y}\n        r={radius}\n        fill=\"lightgreen\"\n      />\n    ));\n\n  const renderEdges = () => {\n    const edges = [];\n    for (let i = 0; i < numInputNodes; i++) {\n      for (let j = 0; j < numHiddenNodes; j++) {\n        const inputPos = inputNodePositions[i];\n        const hiddenPos = hiddenNodePositions[j];\n        edges.push(\n          <Line\n            key={`edge-${i}-${j}`}\n            x1={inputPos.x}\n            y1={inputPos.y}\n            x2={hiddenPos.x}\n            y2={hiddenPos.y}\n            stroke=\"black\"\n          />\n        );\n      }\n    }\n    for (let j = 0; j < numHiddenNodes; j++) {\n      const hiddenPos = hiddenNodePositions[j];\n      const outputPos = outputNodePosition;\n      edges.push(\n        <Line\n          key={`edge-${j}-output`}\n          x1={hiddenPos.x}\n          y1={hiddenPos.y}\n          x2={outputPos.x}\n          y2={outputPos.y}\n          stroke=\"black\"\n        />\n      );\n    }\n    return edges;\n  };\n\n  return (\n    <Svg width={800} height={600}>\n      {renderInputNodes()}\n      {renderHiddenNodes()}\n      <Circle\n        cx={outputNodePosition.x}\n        cy={outputNodePosition.y}\n        r={radius}\n        fill=\"pink\"\n      />\n      {renderEdges()}\n    </Svg>\n  );\n};\n\nexport default Perceptron;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}