{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150,\n    value: 0\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250,\n    value: 0\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350,\n    value: 0\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450,\n    value: 0\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [edges, setEdges] = useState([]);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({\n          source,\n          target,\n          weight\n        });\n      }\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues) => {\n    const value = edges.filter(edge => edge.target === hiddenNode.id).reduce((acc, edge) => {\n      const inputValue = inputNodeValues[edge.source];\n      const weight = edge.weight;\n      return acc + inputValue * weight;\n    }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update output node activation and hidden node values whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({\n      ...prevState,\n      activation\n    }));\n\n    // Calculate hidden node values\n    const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n      const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues);\n      return {\n        ...hiddenNode,\n        value\n      };\n    });\n    setHiddenNodes(updatedHiddenNodes);\n\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes]);\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const hiddenNodeValues = hiddenNodes.map(node => node.value);\n    const activation = calculateOutputActivation(hiddenNodeValues);\n    setOutputNode(prevState => ({\n      ...prevState,\n      activation,\n      color: activation < 0 ? 'grey' : 'red'\n    }));\n  }, [hiddenNodes]);\n\n  // Function to calculate the output node activation using ReLU activation function\n  const calculateOutputActivation = hiddenNodeValues => {\n    const summation = edges.filter(edge => edge.target === outputNode.id).reduce((acc, edge, index) => {\n      const hiddenValue = hiddenNodeValues[index];\n      const weight = edge.weight;\n      return acc + hiddenValue * weight;\n    }, 0);\n    return Math.max(0, summation); // Apply ReLU activation function\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"Perceptron\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"1200\",\n      height: \"800\",\n      children: [[...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 130,\n          y1: (i + 1) * 210,\n          x2: 370,\n          y2: (j + 1) * 175,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (130 + 350) / 2 - 1,\n          y: (i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this)]\n      }, `input-hidden-${i}-${j}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this))), [...Array(4).keys()].map(index => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 429,\n          y1: (index + 1) * 176,\n          x2: 619,\n          y2: 400,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (400 + 650) / 2 - 10,\n          y: (index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-output-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)), Object.keys(inputNodeValues).map((input, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 210,\n          r: \"30\",\n          fill: \"green\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `I ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 100,\n          y: (index + 1) * 210 + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: inputNodeValues[input]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, input, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)), hiddenNodes.map((node, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: node.x,\n          cy: node.y,\n          r: \"30\",\n          fill: \"blue\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: `H ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x,\n          y: node.y + 40,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: node.value.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, `hidden-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 650,\n          cy: 400,\n          r: \"30\",\n          fill: \"red\",\n          opacity: \"0.96\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 650,\n          y: 400,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: \"Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, `output`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"10\",\n        refX: \"8\",\n        refY: \"3\",\n        orient: \"auto\",\n        fill: \"black\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3, 0 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"Gf1wGPlELxISIylk0QLR2R9++Ho=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","value","outputNode","setOutputNode","activation","inputNodeValues","setInputNodeValues","input1","input2","input3","edges","setEdges","generateRandomEdges","inputNodeIds","Object","keys","i","length","target","j","source","weight","Math","random","push","calculateHiddenNodeValue","hiddenNode","filter","edge","reduce","acc","inputValue","prevState","updatedHiddenNodes","map","hiddenNodeValues","node","calculateOutputActivation","color","summation","index","hiddenValue","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","Array","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","type","style","input","cx","cy","r","fill","opacity","textAnchor","alignmentBaseline","toFixed","markerWidth","markerHeight","refX","refY","orient","points","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150, value: 0 },\n    { id: 'hidden2', x: 300, y: 250, value: 0 },\n    { id: 'hidden3', x: 300, y: 350, value: 0 },\n    { id: 'hidden4', x: 300, y: 450, value: 0 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0 }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n  const [edges, setEdges] = useState([]);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({ source, target, weight });\n      }\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues) => {\n    const value = edges\n      .filter(edge => edge.target === hiddenNode.id)\n      .reduce((acc, edge) => {\n        const inputValue = inputNodeValues[edge.source];\n        const weight = edge.weight;\n        return acc + inputValue * weight;\n      }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update output node activation and hidden node values whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({ ...prevState, activation }));\n\n    // Calculate hidden node values\n    const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n      const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues);\n      return { ...hiddenNode, value };\n    });\n    setHiddenNodes(updatedHiddenNodes);\n\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes]);\n\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const hiddenNodeValues = hiddenNodes.map(node => node.value);\n    const activation = calculateOutputActivation(hiddenNodeValues);\n    setOutputNode(prevState => ({\n      ...prevState,\n      activation,\n      color: activation < 0 ? 'grey' : 'red'\n    }));\n  }, [hiddenNodes]);\n  \n  // Function to calculate the output node activation using ReLU activation function\n  const calculateOutputActivation = (hiddenNodeValues) => {\n    const summation = edges\n      .filter(edge => edge.target === outputNode.id)\n      .reduce((acc, edge, index) => {\n        const hiddenValue = hiddenNodeValues[index];\n        const weight = edge.weight;\n        return acc + hiddenValue * weight;\n      }, 0);\n    return Math.max(0, summation); // Apply ReLU activation function\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">Perceptron</div>\n      <svg width=\"1200\" height=\"800\">\n        {/* Render edges from input nodes to hidden nodes */}\n        {[...Array(3).keys()].map((i) => (\n          [...Array(4).keys()].map((j) => (\n            <g key={`input-hidden-${i}-${j}`}>\n              <line\n                x1={130}\n                y1={(i + 1) * 210}\n                x2={370}\n                y2={(j + 1) * 175}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                markerEnd=\"url(#arrowhead)\"\n              />\n              <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n                <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n              </foreignObject>\n            </g>\n          ))\n        ))}\n\n        {/* Render edges from hidden nodes to output node */}\n        {[...Array(4).keys()].map((index) => (\n          <g key={`hidden-output-${index}`}>\n            <line\n              x1={429}\n              y1={(index + 1) * 176}\n              x2={619}\n              y2={400}\n              stroke=\"black\"\n              strokeWidth=\"2\"\n              markerEnd=\"url(#arrowhead)\"\n            />\n            <foreignObject x={(400 + 650) / 2 - 10} y={(index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n              <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n            </foreignObject>\n          </g>\n        ))}\n\n        {/* Render input nodes */}\n        {Object.keys(inputNodeValues).map((input, index) => (\n          <g key={input}>\n            <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n            <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n            {/* Display input value dynamically */}\n            <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n          </g>\n        ))}\n\n        {/* Render hidden nodes */}\n        {hiddenNodes.map((node, index) => (\n          <g key={`hidden-${index}`}>\n            <circle cx={node.x} cy={node.y} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n            <text x={node.x} y={node.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n            {/* Display hidden node value dynamically */}\n            <text x={node.x} y={node.y + 40} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n          </g>\n        ))}\n\n        {/* Render output node */}\n        <g key={`output`}>\n          <circle cx={650} cy={400} r=\"30\" fill=\"red\" opacity=\"0.96\"/>\n          <text x={650} y={400} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n        </g>\n\n        {/* Arrowhead marker */}\n        <marker\n          id=\"arrowhead\"\n          markerWidth=\"10\"\n          markerHeight=\"10\"\n          refX=\"8\"\n          refY=\"3\"\n          orient=\"auto\"\n          fill=\"black\"\n        >\n          <polygon points=\"0 0, 10 3, 0 6\" />\n        </marker>\n      </svg>\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}