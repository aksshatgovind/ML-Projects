{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150\n  }\n  // Initial hidden nodes\n  // Format: { id: 'hidden1', x: 300, y: 150 }\n  ]);\n  const [edges, setEdges] = useState([{\n    source: 'input1',\n    target: 'hidden1',\n    weight: 0.5\n  }, {\n    source: 'input1',\n    target: 'hidden2',\n    weight: -0.2\n  }, {\n    source: 'input2',\n    target: 'hidden1',\n    weight: 0.8\n  }\n  // Add more edges as needed\n  ]);\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = {\n      id,\n      x: 300,\n      y: 150\n    }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n  };\n  const removeHiddenNode = id => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n  };\n  const handleAnimations = () => {\n    // Implement CSS animations for signal/data flow\n    const svgElements = document.querySelectorAll('.signal-flow');\n    svgElements.forEach(element => {\n      element.style.animation = 'flowAnimation 2s linear infinite';\n    });\n  };\n  const handleEdgeWeights = () => {\n    // Implement displaying edge weights\n    const svg = document.querySelector('svg');\n    edges.forEach(edge => {\n      const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n      text.setAttribute(\"x\", (edge.sourceX + edge.targetX) / 2);\n      text.setAttribute(\"y\", (edge.sourceY + edge.targetY) / 2);\n      text.setAttribute(\"fill\", \"black\");\n      text.textContent = edge.weight.toFixed(2); // Assuming edge.weight contains weight value\n      svg.appendChild(text);\n    });\n  };\n  const handleReLUActivation = () => {\n    // Implement ReLU activation for the output node\n    const finalActivation = calculateFinalActivation(inputValues, hiddenNodes);\n    const outputNode = document.getElementById('outputNode');\n    if (outputNode) {\n      outputNode.textContent = `Activation: ${finalActivation}`; // Update text content of output node\n    } else {\n      console.error('Output node not found');\n    }\n  };\n\n  // Call functions when component mounts\n  useEffect(() => {\n    handleAnimations();\n    handleEdgeWeights();\n    handleReLUActivation();\n  }, [inputValues, hiddenNodes]); // Update dependencies to include inputValues and hiddenNodes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      children: /*#__PURE__*/_jsxDEV(\"text\", {\n        id: \"outputNode\",\n        x: \"100\",\n        y: \"100\",\n        fill: \"black\",\n        children: \"Output Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHiddenNode,\n      children: \"Add Hidden Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeHiddenNode(node.id),\n      children: [\"Remove \", node.id]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"Pl4DJrv10O47ikUS7RbCw2Rcok4=\");\n_c = NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","useState","id","x","y","edges","setEdges","source","target","weight","addHiddenNode","length","newNode","removeHiddenNode","filter","node","handleAnimations","svgElements","document","querySelectorAll","forEach","element","style","animation","handleEdgeWeights","svg","querySelector","edge","text","createElementNS","setAttribute","sourceX","targetX","sourceY","targetY","textContent","toFixed","appendChild","handleReLUActivation","finalActivation","calculateFinalActivation","outputNode","getElementById","console","error","useEffect","_jsxDEV","className","children","fill","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["function NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150 },\n    // Initial hidden nodes\n    // Format: { id: 'hidden1', x: 300, y: 150 }\n  ]);\n\n  const [edges, setEdges] = useState([\n    { source: 'input1', target: 'hidden1', weight: 0.5 },\n    { source: 'input1', target: 'hidden2', weight: -0.2 },\n    { source: 'input2', target: 'hidden1', weight: 0.8 },\n    // Add more edges as needed\n  ]);\n\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = { id, x: 300, y: 150 }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n  };\n\n  const removeHiddenNode = (id) => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n  };\n\n  const handleAnimations = () => {\n    // Implement CSS animations for signal/data flow\n    const svgElements = document.querySelectorAll('.signal-flow');\n    svgElements.forEach(element => {\n      element.style.animation = 'flowAnimation 2s linear infinite';\n    });\n  };\n\n  const handleEdgeWeights = () => {\n    // Implement displaying edge weights\n    const svg = document.querySelector('svg');\n    edges.forEach(edge => {\n      const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n      text.setAttribute(\"x\", (edge.sourceX + edge.targetX) / 2);\n      text.setAttribute(\"y\", (edge.sourceY + edge.targetY) / 2);\n      text.setAttribute(\"fill\", \"black\");\n      text.textContent = edge.weight.toFixed(2); // Assuming edge.weight contains weight value\n      svg.appendChild(text);\n    });\n  };\n\n  const handleReLUActivation = () => {\n    // Implement ReLU activation for the output node\n    const finalActivation = calculateFinalActivation(inputValues, hiddenNodes);\n    const outputNode = document.getElementById('outputNode');\n    if (outputNode) {\n      outputNode.textContent = `Activation: ${finalActivation}`; // Update text content of output node\n    } else {\n      console.error('Output node not found');\n    }\n  };\n\n  // Call functions when component mounts\n  useEffect(() => {\n    handleAnimations();\n    handleEdgeWeights();\n    handleReLUActivation();\n  }, [inputValues, hiddenNodes]); // Update dependencies to include inputValues and hiddenNodes\n\n  return (\n    <div className=\"NeuralNetwork\">\n      {/* Render the neural network visualization */}\n      <svg>\n        {/* SVG elements for nodes, edges, animations, etc. */}\n        {/* Add output node */}\n        <text id=\"outputNode\" x=\"100\" y=\"100\" fill=\"black\">Output Node</text>\n      </svg>\n      {/* Button to add hidden node */}\n      <button onClick={addHiddenNode}>Add Hidden Node</button>\n      {/* Button to remove hidden node */}\n      {hiddenNodes.map(node => (\n        <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n      ))}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}