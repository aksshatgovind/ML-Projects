{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { calculateFinalActivation } from '../utils';\n\n// function NeuralNetwork({ inputValues }) {\n//   const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n//   const [edges, setEdges] = useState(generateRandomEdges());\n//   const [finalActivation, setFinalActivation] = useState(0);\n\n//   function generateRandomHiddenNodes() {\n//     const numNodes = Math.floor(Math.random() * 5) + 1;\n//     const nodes = [];\n//     for (let i = 0; i < numNodes; i++) {\n//       nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n//     }\n//     return nodes;\n//   }\n\n//   function generateRandomEdges() {\n//     const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length;\n//     const edges = [];\n//     const inputNodeIds = Object.keys(inputValues);\n//     for (let i = 0; i < numEdges; i++) {\n//       const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)];\n//       const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`;\n//       const weight = Math.random() * 2 - 1;\n//       edges.push({ source, target, weight });\n//     }\n//     return edges;\n//   }\n\n//   useEffect(() => {\n//     setHiddenNodes(generateRandomHiddenNodes());\n//     setEdges(generateRandomEdges());\n//   }, [inputValues]);\n\n//   useEffect(() => {\n//     const activation = calculateFinalActivation(inputValues, hiddenNodes);\n//     setFinalActivation(activation);\n//   }, [inputValues, hiddenNodes]);\n\n//   const addHiddenNode = () => {\n//     const id = `hidden${hiddenNodes.length + 1}`;\n//     const newNode = { id, x: Math.random() * 500, y: Math.random() * 300 };\n//     setHiddenNodes([...hiddenNodes, newNode]);\n//   };\n\n//   const removeHiddenNode = (id) => {\n//     setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n//   };\n\n//   return (\n//     <div className=\"NeuralNetwork\">\n//       <svg width=\"800\" height=\"400\">\n//         {/* Render nodes */}\n//         {hiddenNodes.map(node => (\n//           <circle key={node.id} cx={node.x} cy={node.y} r=\"20\" fill=\"blue\" />\n//         ))}\n\n//         {/* Render edges */}\n//         {edges.map(edge => (\n//           <line key={`${edge.source}-${edge.target}`} x1={edge.sourceX} y1={edge.sourceY} x2={edge.targetX} y2={edge.targetY} stroke=\"black\" strokeWidth=\"2\" />\n//         ))}\n\n//         {/* Render animations */}\n//         {edges.map(edge => (\n//           <circle key={`${edge.source}-${edge.target}-animation`} cx={edge.sourceX} cy={edge.sourceY} r=\"5\" fill=\"red\">\n//             <animateMotion dur=\"2s\" repeatCount=\"indefinite\">\n//               <mpath href={`#path-${edge.source}-${edge.target}`} />\n//             </animateMotion>\n//           </circle>\n//         ))}\n\n//         {/* Render paths for animations */}\n//         {edges.map(edge => (\n//           <path key={`path-${edge.source}-${edge.target}`} id={`path-${edge.source}-${edge.target}`} d={`M ${edge.sourceX} ${edge.sourceY} L ${edge.targetX} ${edge.targetY}`} />\n//         ))}\n\n//         {/* Render output node */}\n//         <text x=\"700\" y=\"100\" fill=\"black\">Output Node: {finalActivation}</text>\n//       </svg>\n//       <button onClick={addHiddenNode}>Add Hidden Node</button>\n//       {hiddenNodes.map(node => (\n//         <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default NeuralNetwork;","map":{"version":3,"names":[],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { calculateFinalActivation } from '../utils';\n\n// function NeuralNetwork({ inputValues }) {\n//   const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n//   const [edges, setEdges] = useState(generateRandomEdges());\n//   const [finalActivation, setFinalActivation] = useState(0);\n\n//   function generateRandomHiddenNodes() {\n//     const numNodes = Math.floor(Math.random() * 5) + 1;\n//     const nodes = [];\n//     for (let i = 0; i < numNodes; i++) {\n//       nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n//     }\n//     return nodes;\n//   }\n\n//   function generateRandomEdges() {\n//     const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length;\n//     const edges = [];\n//     const inputNodeIds = Object.keys(inputValues);\n//     for (let i = 0; i < numEdges; i++) {\n//       const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)];\n//       const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`;\n//       const weight = Math.random() * 2 - 1;\n//       edges.push({ source, target, weight });\n//     }\n//     return edges;\n//   }\n\n//   useEffect(() => {\n//     setHiddenNodes(generateRandomHiddenNodes());\n//     setEdges(generateRandomEdges());\n//   }, [inputValues]);\n\n//   useEffect(() => {\n//     const activation = calculateFinalActivation(inputValues, hiddenNodes);\n//     setFinalActivation(activation);\n//   }, [inputValues, hiddenNodes]);\n\n//   const addHiddenNode = () => {\n//     const id = `hidden${hiddenNodes.length + 1}`;\n//     const newNode = { id, x: Math.random() * 500, y: Math.random() * 300 };\n//     setHiddenNodes([...hiddenNodes, newNode]);\n//   };\n\n//   const removeHiddenNode = (id) => {\n//     setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n//   };\n\n//   return (\n//     <div className=\"NeuralNetwork\">\n//       <svg width=\"800\" height=\"400\">\n//         {/* Render nodes */}\n//         {hiddenNodes.map(node => (\n//           <circle key={node.id} cx={node.x} cy={node.y} r=\"20\" fill=\"blue\" />\n//         ))}\n\n//         {/* Render edges */}\n//         {edges.map(edge => (\n//           <line key={`${edge.source}-${edge.target}`} x1={edge.sourceX} y1={edge.sourceY} x2={edge.targetX} y2={edge.targetY} stroke=\"black\" strokeWidth=\"2\" />\n//         ))}\n\n//         {/* Render animations */}\n//         {edges.map(edge => (\n//           <circle key={`${edge.source}-${edge.target}-animation`} cx={edge.sourceX} cy={edge.sourceY} r=\"5\" fill=\"red\">\n//             <animateMotion dur=\"2s\" repeatCount=\"indefinite\">\n//               <mpath href={`#path-${edge.source}-${edge.target}`} />\n//             </animateMotion>\n//           </circle>\n//         ))}\n\n//         {/* Render paths for animations */}\n//         {edges.map(edge => (\n//           <path key={`path-${edge.source}-${edge.target}`} id={`path-${edge.source}-${edge.target}`} d={`M ${edge.sourceX} ${edge.sourceY} L ${edge.targetX} ${edge.targetY}`} />\n//         ))}\n\n//         {/* Render output node */}\n//         <text x=\"700\" y=\"100\" fill=\"black\">Output Node: {finalActivation}</text>\n//       </svg>\n//       <button onClick={addHiddenNode}>Add Hidden Node</button>\n//       {hiddenNodes.map(node => (\n//         <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default NeuralNetwork;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}