{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [edges, setEdges] = useState(generateRandomEdges());\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  useEffect(() => {\n    // Update input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({\n      ...prevState,\n      activation\n    }));\n  }, [inputNodeValues, hiddenNodes]);\n  function generateRandomEdges() {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({\n          source,\n          target,\n          weight\n        });\n      }\n    }\n    return edges;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"nn\",\n      children: \"NN VISION\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"800\",\n      height: \"600\",\n      children: [[...Array(3).keys()].map(index => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 100,\n          r: \"20\",\n          fill: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 130,\n          y: (index + 1) * 100 + 5,\n          children: `Input ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: 150,\n          y: (index + 1) * 100 - 10,\n          width: \"40\",\n          height: \"40\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: `input${index + 1}`,\n            value: inputNodeValues[`input${index + 1}`],\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this)]\n      }, `input-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)), [...Array(4).keys()].map(index => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: 300,\n        cy: (index + 1) * 100,\n        r: \"20\",\n        fill: \"blue\"\n      }, `hidden-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this)), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: 500,\n        cy: 250,\n        r: \"20\",\n        fill: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 450,\n        y: 255,\n        fill: \"black\",\n        children: [\"Output Node: \", outputNode.activation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 3\n      }, this), [...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 100,\n        y1: (i + 1) * 100,\n        x2: 300,\n        y2: (j + 1) * 100,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, `input-hidden-${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this))), [...Array(4).keys()].map(index => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 300,\n        y1: (index + 1) * 100,\n        x2: 500,\n        y2: 250,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, `hidden-output-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"q3SrHCvqiA5ZeQSpeZZw4zasIWA=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","outputNode","setOutputNode","activation","inputNodeValues","setInputNodeValues","input1","input2","input3","edges","setEdges","generateRandomEdges","handleInputChange","e","name","value","target","prevState","inputNodeIds","Object","keys","i","length","j","source","weight","Math","random","push","className","children","class","fileName","_jsxFileName","lineNumber","columnNumber","width","height","Array","map","index","cx","cy","r","fill","type","onChange","x1","y1","x2","y2","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150 },\n    { id: 'hidden2', x: 300, y: 250 },\n    { id: 'hidden3', x: 300, y: 350 },\n    { id: 'hidden4', x: 300, y: 450 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0 }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n  const [edges, setEdges] = useState(generateRandomEdges());\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    // Update input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({ ...prevState, activation }));\n  }, [inputNodeValues, hiddenNodes]);\n\n  function generateRandomEdges() {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({ source, target, weight });\n      }\n    }\n    return edges;\n  }\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <h1 class=\"nn\">NN VISION</h1>\n      <svg width=\"800\" height=\"600\">\n  {/* Render input nodes */}\n  {[...Array(3).keys()].map((index) => (\n    <g key={`input-${index}`}>\n      <circle cx={100} cy={(index + 1) * 100} r=\"20\" fill=\"green\" />\n      <text x={130} y={(index + 1) * 100 + 5}>{`Input ${index + 1}`}</text>\n      <foreignObject x={150} y={(index + 1) * 100 - 10} width=\"40\" height=\"40\">\n        <input\n          type=\"number\"\n          name={`input${index + 1}`}\n          value={inputNodeValues[`input${index + 1}`]}\n          onChange={handleInputChange}\n        />\n      </foreignObject>\n    </g>\n  ))}\n\n  {/* Render hidden nodes */}\n  {[...Array(4).keys()].map((index) => (\n    <circle\n      key={`hidden-${index}`}\n      cx={300}\n      cy={(index + 1) * 100}\n      r=\"20\"\n      fill=\"blue\"\n    />\n  ))}\n\n  {/* Render output node */}\n  <circle cx={500} cy={250} r=\"20\" fill=\"red\" />\n  <text x={450} y={255} fill=\"black\">Output Node: {outputNode.activation}</text>\n\n  {/* Render edges from input nodes to hidden nodes */}\n  {[...Array(3).keys()].map((i) => (\n    [...Array(4).keys()].map((j) => (\n      <line\n        key={`input-hidden-${i}-${j}`}\n        x1={100}\n        y1={(i + 1) * 100}\n        x2={300}\n        y2={(j + 1) * 100}\n        stroke=\"black\"\n        strokeWidth=\"2\"\n      />\n    ))\n  ))}\n\n  {/* Render edges from hidden nodes to output node */}\n  {[...Array(4).keys()].map((index) => (\n    <line\n      key={`hidden-output-${index}`}\n      x1={300}\n      y1={(index + 1) * 100}\n      x2={500}\n      y2={250}\n      stroke=\"black\"\n      strokeWidth=\"2\"\n    />\n  ))}\n</svg>\n\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}