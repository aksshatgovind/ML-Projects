{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/PerceptronSVG.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Perceptron = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const radius = 30; // Adjust the radius as needed\n  const numInputNodes = 3;\n  const numHiddenNodes = 4;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const getInputNodePositions = () => {\n      const positions = [];\n      const spacing = Math.PI * 2 / (numInputNodes + 1);\n      for (let i = 1; i <= numInputNodes; i++) {\n        positions.push({\n          x: radius * Math.cos(spacing * i) + radius,\n          y: radius * Math.sin(spacing * i) + radius\n        });\n      }\n      return positions;\n    };\n    const getHiddenNodePositions = () => {\n      const positions = [];\n      const spacing = Math.PI * 2 / (numHiddenNodes + 1);\n      const offsetRadius = radius * 2.5; // Adjust offset radius as needed\n      for (let i = 1; i <= numHiddenNodes; i++) {\n        positions.push({\n          x: offsetRadius * Math.cos(spacing * i) + radius,\n          y: offsetRadius * Math.sin(spacing * i) + radius\n        });\n      }\n      return positions;\n    };\n    const getOutputNodePosition = () => ({\n      x: radius * 3,\n      y: radius\n    });\n    const inputNodePositions = getInputNodePositions();\n    const hiddenNodePositions = getHiddenNodePositions();\n    const outputNodePosition = getOutputNodePosition();\n    const drawNode = (x, y, color) => {\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, Math.PI * 2);\n      ctx.fillStyle = color;\n      ctx.fill();\n      ctx.closePath();\n    };\n    const drawEdge = (x1, y1, x2, y2) => {\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.strokeStyle = 'black';\n      ctx.stroke();\n      ctx.closePath();\n    };\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw input nodes\n    inputNodePositions.forEach(({\n      x,\n      y\n    }) => drawNode(x, y, 'lightblue'));\n\n    // Draw hidden nodes\n    hiddenNodePositions.forEach(({\n      x,\n      y\n    }) => drawNode(x, y, 'lightgreen'));\n\n    // Draw output node\n    drawNode(outputNodePosition.x, outputNodePosition.y, 'pink');\n\n    // Draw edges\n    inputNodePositions.forEach(inputNode => {\n      hiddenNodePositions.forEach(hiddenNode => {\n        drawEdge(inputNode.x, inputNode.y, hiddenNode.x, hiddenNode.y);\n      });\n    });\n    hiddenNodePositions.forEach(hiddenNode => {\n      drawEdge(hiddenNode.x, hiddenNode.y, outputNodePosition.x, outputNodePosition.y);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 800,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(Perceptron, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Perceptron;\nexport default Perceptron;\nvar _c;\n$RefreshReg$(_c, \"Perceptron\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Perceptron","_s","canvasRef","radius","numInputNodes","numHiddenNodes","canvas","current","ctx","getContext","getInputNodePositions","positions","spacing","Math","PI","i","push","x","cos","y","sin","getHiddenNodePositions","offsetRadius","getOutputNodePosition","inputNodePositions","hiddenNodePositions","outputNodePosition","drawNode","color","beginPath","arc","fillStyle","fill","closePath","drawEdge","x1","y1","x2","y2","moveTo","lineTo","strokeStyle","stroke","clearRect","width","height","forEach","inputNode","hiddenNode","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/PerceptronSVG.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst Perceptron = () => {\n  const canvasRef = useRef(null);\n  const radius = 30; // Adjust the radius as needed\n  const numInputNodes = 3;\n  const numHiddenNodes = 4;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const getInputNodePositions = () => {\n      const positions = [];\n      const spacing = Math.PI * 2 / (numInputNodes + 1);\n      for (let i = 1; i <= numInputNodes; i++) {\n        positions.push({\n          x: radius * Math.cos(spacing * i) + radius,\n          y: radius * Math.sin(spacing * i) + radius,\n        });\n      }\n      return positions;\n    };\n\n    const getHiddenNodePositions = () => {\n      const positions = [];\n      const spacing = Math.PI * 2 / (numHiddenNodes + 1);\n      const offsetRadius = radius * 2.5; // Adjust offset radius as needed\n      for (let i = 1; i <= numHiddenNodes; i++) {\n        positions.push({\n          x: offsetRadius * Math.cos(spacing * i) + radius,\n          y: offsetRadius * Math.sin(spacing * i) + radius,\n        });\n      }\n      return positions;\n    };\n\n    const getOutputNodePosition = () => ({\n      x: radius * 3,\n      y: radius,\n    });\n\n    const inputNodePositions = getInputNodePositions();\n    const hiddenNodePositions = getHiddenNodePositions();\n    const outputNodePosition = getOutputNodePosition();\n\n    const drawNode = (x, y, color) => {\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, Math.PI * 2);\n      ctx.fillStyle = color;\n      ctx.fill();\n      ctx.closePath();\n    };\n\n    const drawEdge = (x1, y1, x2, y2) => {\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.strokeStyle = 'black';\n      ctx.stroke();\n      ctx.closePath();\n    };\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw input nodes\n    inputNodePositions.forEach(({ x, y }) => drawNode(x, y, 'lightblue'));\n\n    // Draw hidden nodes\n    hiddenNodePositions.forEach(({ x, y }) => drawNode(x, y, 'lightgreen'));\n\n    // Draw output node\n    drawNode(outputNodePosition.x, outputNodePosition.y, 'pink');\n\n    // Draw edges\n    inputNodePositions.forEach(inputNode => {\n      hiddenNodePositions.forEach(hiddenNode => {\n        drawEdge(inputNode.x, inputNode.y, hiddenNode.x, hiddenNode.y);\n      });\n    });\n\n    hiddenNodePositions.forEach(hiddenNode => {\n      drawEdge(hiddenNode.x, hiddenNode.y, outputNodePosition.x, outputNodePosition.y);\n    });\n  }, []);\n\n  return <canvas ref={canvasRef} width={800} height={600} />;\n};\n\nexport default Perceptron;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}