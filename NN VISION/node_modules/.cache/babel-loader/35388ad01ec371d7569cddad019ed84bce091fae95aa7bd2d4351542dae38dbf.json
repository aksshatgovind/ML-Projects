{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\n// NeuralNetwork.js\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150\n  }\n  // Initial hidden nodes\n  // Format: { id: 'hidden1', x: 300, y: 150 }\n  ]);\n  const [edges, setEdges] = useState([\n    // Initial edges\n    // Format: { source: 'input1', target: 'hidden1', weight: 0.5 }\n  ]);\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = {\n      id,\n      x: 300,\n      y: 150\n    }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n\n    // Add edges from input nodes to new hidden node\n    const newEdges = inputValues.map((inputValue, index) => ({\n      source: `input${index + 1}`,\n      target: id,\n      weight: inputValue // Set weight as input value\n    }));\n    setEdges(prevEdges => [...prevEdges, ...newEdges]);\n  };\n\n  // Handle input values change to update weights of edges from input nodes to hidden nodes\n  useEffect(() => {\n    const updatedEdges = edges.map(edge => {\n      if (edge.target.startsWith('hidden')) {\n        const inputValue = inputValues[parseInt(edge.source.replace('input', '')) - 1];\n        return {\n          ...edge,\n          weight: inputValue\n        };\n      }\n      return edge;\n    });\n    setEdges(updatedEdges);\n  }, [inputValues]);\n  const removeHiddenNode = id => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n    // Remove edges connected to the removed hidden node\n    setEdges(edges.filter(edge => edge.target !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      children: [inputValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: 50,\n        cy: 50 * (index + 1),\n        r: 10,\n        fill: \"blue\"\n      }, `input${index + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: 10,\n        fill: \"green\"\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 50,\n        y1: 50 * parseInt(edge.source.replace('input', '')),\n        x2: node.x,\n        y2: node.y,\n        stroke: \"black\"\n      }, `edge${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: 100,\n        y: 100,\n        fill: \"black\",\n        children: \"Output Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHiddenNode,\n      children: \"Add Hidden Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeHiddenNode(node.id),\n      children: [\"Remove \", node.id]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"kGp1pROi7WfSnU5hH+WxGqYZWog=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","edges","setEdges","addHiddenNode","length","newNode","newEdges","map","inputValue","index","source","target","weight","prevEdges","updatedEdges","edge","startsWith","parseInt","replace","removeHiddenNode","filter","node","className","children","value","cx","cy","r","fill","fileName","_jsxFileName","lineNumber","columnNumber","x1","y1","x2","y2","stroke","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// NeuralNetwork.js\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150 },\n    // Initial hidden nodes\n    // Format: { id: 'hidden1', x: 300, y: 150 }\n  ]);\n\n  const [edges, setEdges] = useState([\n    // Initial edges\n    // Format: { source: 'input1', target: 'hidden1', weight: 0.5 }\n  ]);\n\n  const addHiddenNode = () => {\n    const id = `hidden${hiddenNodes.length + 1}`;\n    const newNode = { id, x: 300, y: 150 }; // Default position\n    setHiddenNodes([...hiddenNodes, newNode]);\n\n    // Add edges from input nodes to new hidden node\n    const newEdges = inputValues.map((inputValue, index) => ({\n      source: `input${index + 1}`,\n      target: id,\n      weight: inputValue, // Set weight as input value\n    }));\n    setEdges(prevEdges => [...prevEdges, ...newEdges]);\n  };\n\n  // Handle input values change to update weights of edges from input nodes to hidden nodes\n  useEffect(() => {\n    const updatedEdges = edges.map(edge => {\n      if (edge.target.startsWith('hidden')) {\n        const inputValue = inputValues[parseInt(edge.source.replace('input', '')) - 1];\n        return { ...edge, weight: inputValue };\n      }\n      return edge;\n    });\n    setEdges(updatedEdges);\n  }, [inputValues]);\n\n  const removeHiddenNode = (id) => {\n    setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n    // Remove edges connected to the removed hidden node\n    setEdges(edges.filter(edge => edge.target !== id));\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      {/* Render the neural network visualization */}\n      <svg>\n        {/* Render input nodes */}\n        {inputValues.map((value, index) => (\n          <circle key={`input${index + 1}`} cx={50} cy={50 * (index + 1)} r={10} fill=\"blue\" />\n        ))}\n        {/* Render hidden nodes */}\n        {hiddenNodes.map(node => (\n          <circle key={node.id} cx={node.x} cy={node.y} r={10} fill=\"green\" />\n        ))}\n        {/* Render edges */}\n        {edges.map((edge, index) => (\n          <line key={`edge${index}`} x1={50} y1={50 * parseInt(edge.source.replace('input', ''))} x2={node.x} y2={node.y} stroke=\"black\" />\n        ))}\n        {/* Render output node */}\n        <text x={100} y={100} fill=\"black\">Output Node</text>\n      </svg>\n      {/* Button to add hidden node */}\n      <button onClick={addHiddenNode}>Add Hidden Node</button>\n      {/* Button to remove hidden node */}\n      {hiddenNodes.map(node => (\n        <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n      ))}\n    </div>\n  );\n}\n\n\nexport default NeuralNetwork;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,wBAAwB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,aAAaA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAC7C;IAAEU,EAAE,EAAE,SAAS;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI;EAChC;EACA;EAAA,CACD,CAAC;EAEF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC;IACjC;IACA;EAAA,CACD,CAAC;EAEF,MAAMe,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAML,EAAE,GAAG,SAASF,WAAW,CAACQ,MAAM,GAAG,CAAC,EAAE;IAC5C,MAAMC,OAAO,GAAG;MAAEP,EAAE;MAAEC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAI,CAAC,CAAC,CAAC;IACxCH,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAES,OAAO,CAAC,CAAC;;IAEzC;IACA,MAAMC,QAAQ,GAAGZ,WAAW,CAACa,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,MAAM;MACvDC,MAAM,EAAE,QAAQD,KAAK,GAAG,CAAC,EAAE;MAC3BE,MAAM,EAAEb,EAAE;MACVc,MAAM,EAAEJ,UAAU,CAAE;IACtB,CAAC,CAAC,CAAC;IACHN,QAAQ,CAACW,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE,GAAGP,QAAQ,CAAC,CAAC;EACpD,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMyB,YAAY,GAAGb,KAAK,CAACM,GAAG,CAACQ,IAAI,IAAI;MACrC,IAAIA,IAAI,CAACJ,MAAM,CAACK,UAAU,CAAC,QAAQ,CAAC,EAAE;QACpC,MAAMR,UAAU,GAAGd,WAAW,CAACuB,QAAQ,CAACF,IAAI,CAACL,MAAM,CAACQ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9E,OAAO;UAAE,GAAGH,IAAI;UAAEH,MAAM,EAAEJ;QAAW,CAAC;MACxC;MACA,OAAOO,IAAI;IACb,CAAC,CAAC;IACFb,QAAQ,CAACY,YAAY,CAAC;EACxB,CAAC,EAAE,CAACpB,WAAW,CAAC,CAAC;EAEjB,MAAMyB,gBAAgB,GAAIrB,EAAE,IAAK;IAC/BD,cAAc,CAACD,WAAW,CAACwB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACvB,EAAE,KAAKA,EAAE,CAAC,CAAC;IAC1D;IACAI,QAAQ,CAACD,KAAK,CAACmB,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACJ,MAAM,KAAKb,EAAE,CAAC,CAAC;EACpD,CAAC;EAED,oBACEN,OAAA;IAAK8B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5B/B,OAAA;MAAA+B,QAAA,GAEG7B,WAAW,CAACa,GAAG,CAAC,CAACiB,KAAK,EAAEf,KAAK,kBAC5BjB,OAAA;QAAkCiC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,EAAE,IAAIjB,KAAK,GAAG,CAAC,CAAE;QAACkB,CAAC,EAAE,EAAG;QAACC,IAAI,EAAC;MAAM,GAArE,QAAQnB,KAAK,GAAG,CAAC,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoD,CACrF,CAAC,EAEDpC,WAAW,CAACW,GAAG,CAACc,IAAI,iBACnB7B,OAAA;QAAsBiC,EAAE,EAAEJ,IAAI,CAACtB,CAAE;QAAC2B,EAAE,EAAEL,IAAI,CAACrB,CAAE;QAAC2B,CAAC,EAAE,EAAG;QAACC,IAAI,EAAC;MAAO,GAApDP,IAAI,CAACvB,EAAE;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+C,CACpE,CAAC,EAED/B,KAAK,CAACM,GAAG,CAAC,CAACQ,IAAI,EAAEN,KAAK,kBACrBjB,OAAA;QAA2ByC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,EAAE,GAAGjB,QAAQ,CAACF,IAAI,CAACL,MAAM,CAACQ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAE;QAACiB,EAAE,EAAEd,IAAI,CAACtB,CAAE;QAACqC,EAAE,EAAEf,IAAI,CAACrB,CAAE;QAACqC,MAAM,EAAC;MAAO,GAAnH,OAAO5B,KAAK,EAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuG,CACjI,CAAC,eAEFxC,OAAA;QAAMO,CAAC,EAAE,GAAI;QAACC,CAAC,EAAE,GAAI;QAAC4B,IAAI,EAAC,OAAO;QAAAL,QAAA,EAAC;MAAW;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eAENxC,OAAA;MAAQ8C,OAAO,EAAEnC,aAAc;MAAAoB,QAAA,EAAC;IAAe;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAEvDpC,WAAW,CAACW,GAAG,CAACc,IAAI,iBACnB7B,OAAA;MAAsB8C,OAAO,EAAEA,CAAA,KAAMnB,gBAAgB,CAACE,IAAI,CAACvB,EAAE,CAAE;MAAAyB,QAAA,GAAC,SAAO,EAACF,IAAI,CAACvB,EAAE;IAAA,GAAlEuB,IAAI,CAACvB,EAAE;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAoE,CACzF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrC,EAAA,CAvEQF,aAAa;AAAA8C,EAAA,GAAb9C,aAAa;AA0EtB,eAAeA,aAAa;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}