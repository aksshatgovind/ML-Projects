{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// function NeuralNetwork({ inputValues }) {\n//   const [hiddenNodes, setHiddenNodes] = useState([\n//     { id: 'hidden1', x: 300, y: 150, value: 0 },\n//     { id: 'hidden2', x: 300, y: 250, value: 0 },\n//     { id: 'hidden3', x: 300, y: 350, value: 0 },\n//     { id: 'hidden4', x: 300, y: 450, value: 0 },\n//     // Default hidden nodes\n//   ]);\n//   const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0, color: 'red' }); // Output node\n//   const [inputNodeValues, setInputNodeValues] = useState({\n//     input1: 0,\n//     input2: 0,\n//     input3: 0,\n//     // Default input values\n//   });\n//   const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n//     const weights = [];\n//     for (let i = 0; i < 4; i++) {\n//       weights.push(Array(3).fill(0)); // Initialize each row with 3 weights with default value 0\n//     }\n//     return weights;\n//   });\n//   const [edges, setEdges] = useState([]);\n//   const [inputsComplete, setInputsComplete] = useState(false);\n\n//   // Function to generate random edges with weights\n//   const generateRandomEdges = () => {\n//     const edges = [];\n//     for (let i = 0; i < hiddenNodes.length; i++) {\n//       const target = hiddenNodes[i].id;\n//       for (let j = 0; j < 3; j++) {\n//         const source = `input${j + 1}`;\n//         const weight = inputToHiddenWeights[i][j]; // Use the weight from inputToHiddenWeights\n//         edges.push({ source, target, weight });\n//       }\n//     }\n//     return edges;\n//   };\n\n//   // Function to calculate the value of a hidden node\n//   const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n//     const value = edges\n//       .filter(edge => edge.target === hiddenNode.id)\n//       .reduce((acc, edge) => {\n//         const inputValue = inputNodeValues[edge.source];\n//         const weight = edge.weight;\n//         return acc + inputValue * weight;\n//       }, 0);\n//     // Apply ReLU activation function\n//     return value >= 0 ? value : 0;\n//   };\n\n//   useEffect(() => {\n//     // Initialize input values whenever inputValues prop changes\n//     setInputNodeValues(inputValues);\n//   }, [inputValues]);\n\n//   useEffect(() => {\n//     // Update hidden node values whenever input node values change\n//     if (inputsComplete) {\n//       const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n//         const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n//         return { ...hiddenNode, value };\n//       });\n//       setHiddenNodes(updatedHiddenNodes);\n//     }\n//   }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n\n//   useEffect(() => {\n//     // Generate random edges whenever input values or hidden nodes change\n//     setEdges(generateRandomEdges());\n//   }, [inputNodeValues, hiddenNodes, inputToHiddenWeights]);\n\n//   const handleInputChange = (e, inputName) => {\n//     setInputNodeValues(prevState => ({ ...prevState, [inputName]: parseFloat(e.target.value) }));\n//   };\n\n//   const handleInputComplete = () => {\n//     setInputsComplete(true);\n//   };\n\n//   const handleWeightChange = (e, rowIndex, colIndex) => {\n//     const newWeights = [...inputToHiddenWeights];\n//     newWeights[rowIndex][colIndex] = parseFloat(e.target.value);\n//     setInputToHiddenWeights(newWeights);\n//   };\n\n//   return (\n//     <div className=\"NeuralNetwork\">\n//       <div className=\"t\">Perceptron</div>\n//       <svg width=\"1200\" height=\"800\">\n//         {/* Render edges from input nodes to hidden nodes */}\n//         {[...Array(3).keys()].map((i) => (\n//           [...Array(4).keys()].map((j) => (\n//             <g key={`input-hidden-${i}-${j}`}>\n//               <line\n//                 x1={130}\n//                 y1={(i + 1) * 210}\n//                 x2={370}\n//                 y2={(j + 1) * 175}\n//                 stroke=\"black\"\n//                 strokeWidth=\"2\"\n//                 markerEnd=\"url(#arrowhead)\"\n//               />\n//               <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n//                 <input\n//                   type=\"number\"\n//                   style={{ width: \"20px\", height: \"20px\" }}\n//                   value={inputToHiddenWeights[j][i]} // Adjusted indexing for weights array\n//                   onChange={(e) => handleWeightChange(e, j, i)} // Pass rowIndex and colIndex\n//                 />\n//               </foreignObject>\n//             </g>\n//           ))\n//         ))}\n\n//         {/* Render edges from hidden nodes to output node */}\n//         {[...Array(4).keys()].map((index) => (\n//           <g key={`hidden-output-${index}`}>\n//             <line\n//               x1={429}\n//               y1={(index + 1) * 176}\n//               x2={619}\n//               y2={400}\n//               stroke=\"black\"\n//               strokeWidth=\"2\"\n//               markerEnd=\"url(#arrowhead)\"\n//             />\n//             <foreignObject x={(400 + 650) / 2 - 10} y={(index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n//               <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n//             </foreignObject>\n//           </g>\n//         ))}\n\n//         {/* Render input nodes */}\n//         {Object.keys(inputNodeValues).map((input, index) => (\n//           <g key={input}>\n//             <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n//             <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n//             {/* Display input value dynamically */}\n//             <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n//           </g>\n//         ))}\n\n//         {/* Render hidden nodes */}\n//         {hiddenNodes.map((node, index) => (\n//           <g key={`hidden-${index}`}>\n//             <circle cx={node.x} cy={node.y} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n//             <text x={node.x} y={node.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n//             {/* Display hidden node value dynamically */}\n//             <text x={node.x} y={node.y + 40} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n//           </g>\n//         ))}\n\n//         {/* Render output node */}\n//         <g key={`output`}>\n//           <circle cx={outputNode.x} cy={outputNode.y} r=\"30\" fill={outputNode.color} opacity=\"0.96\"/>\n//           <text x={outputNode.x} y={outputNode.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n//           {/* Display output value dynamically rounded to 2 decimal places */}\n//           <text x={outputNode.x} y={outputNode.y + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">\n//             {outputNode.activation.toFixed(2)}\n//           </text>\n//         </g>\n\n//         {/* Arrowhead marker */}\n//         <marker\n//           id=\"arrowhead\"\n//           markerWidth=\"10\"\n//           markerHeight=\"10\"\n//           refX=\"8\"\n//           refY=\"3\"\n//           orient=\"auto\"\n//           fill=\"black\"\n//         >\n//           <polygon points=\"0 0, 10 3, 0 6\" />\n//         </marker>\n//       </svg>\n\n//       {!inputsComplete && <button onClick={handleInputComplete}>Calculate Hidden Values</button>}\n//     </div>\n//   );\n// }\n\n// export default NeuralNetwork;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150,\n    value: 0\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250,\n    value: 0\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350,\n    value: 0\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450,\n    value: 0\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0,\n    color: 'red'\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n    const weights = [];\n    for (let i = 0; i < 4; i++) {\n      weights.push(Array(3).fill(0)); // Initialize each row with 3 weights with default value 0\n    }\n    return weights;\n  });\n  const [outputWeights, setOutputWeights] = useState(Array(4).fill(0)); // Initialize output weights with default value 0\n  const [outputNodeValue, setOutputNodeValue] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < 3; j++) {\n        const source = `input${j + 1}`;\n        const weight = inputToHiddenWeights[i][j]; // Use the weight from inputToHiddenWeights\n        edges.push({\n          source,\n          target,\n          weight\n        });\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      const source = `hidden${i + 1}`;\n      const weight = outputWeights[i]; // Use the weight from outputWeights\n      edges.push({\n        source,\n        target: 'output',\n        weight\n      });\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges.filter(edge => edge.target === hiddenNode.id).reduce((acc, edge) => {\n      const inputValue = inputNodeValues[edge.source];\n      const weight = edge.weight;\n      return acc + inputValue * weight;\n    }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  // Function to calculate the value of the output node\n  const calculateOutputNodeValue = hiddenNodeValues => {\n    const summation = outputWeights.reduce((acc, weight, index) => {\n      const hiddenValue = hiddenNodeValues[index];\n      return acc + hiddenValue * weight;\n    }, 0);\n    return Math.max(0, summation); // Apply ReLU activation function\n  };\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n        return {\n          ...hiddenNode,\n          value\n        };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n  useEffect(() => {\n    // Calculate output node value whenever hidden node values change\n    const hiddenNodeValues = hiddenNodes.map(node => node.value);\n    const outputValue = calculateOutputNodeValue(hiddenNodeValues);\n    setOutputNodeValue(outputValue);\n  }, [hiddenNodes]);\n  useEffect(() => {\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes, inputToHiddenWeights, outputWeights]);\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [inputName]: parseFloat(e.target.value)\n    }));\n  };\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n  const handleWeightChange = (e, rowIndex, colIndex) => {\n    const newWeights = [...inputToHiddenWeights];\n    newWeights[rowIndex][colIndex] = parseFloat(e.target.value);\n    setInputToHiddenWeights(newWeights);\n  };\n  const handleOutputCalculation = () => {\n    const hiddenNodeValues = hiddenNodes.map(node => node.value);\n    const outputValue = calculateOutputNodeValue(hiddenNodeValues);\n    setOutputNodeValue(outputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"Perceptron\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"1200\",\n      height: \"800\",\n      children: [...Array(3).keys()].map(i => [...Array(4).keys()].map(j => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: 130,\n          y1: (i + 1) * 210,\n          x2: 370,\n          y2: (j + 1) * 175,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          markerEnd: \"url(#arrowhead)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: (130 + 350) / 2 - 1,\n          y: (i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10,\n          width: \"20\",\n          height: \"20\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            },\n            value: inputToHiddenWeights[j][i] // Adjusted indexing for weights array\n            ,\n            onChange: e => handleWeightChange(e, j, i) // Pass rowIndex and colIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this)]\n      }, `input-hidden-${i}-${j}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), !inputsComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInputComplete,\n      children: \"Calculate Hidden Values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 27\n    }, this), inputsComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOutputCalculation,\n      children: \"Calculate Output Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Output Value: \", outputNodeValue.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"ohrgiqeZsKmlHN0GuIbYlLGUekg=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","value","outputNode","setOutputNode","activation","color","inputNodeValues","setInputNodeValues","input1","input2","input3","inputToHiddenWeights","setInputToHiddenWeights","weights","i","push","Array","fill","outputWeights","setOutputWeights","outputNodeValue","setOutputNodeValue","edges","setEdges","inputsComplete","setInputsComplete","generateRandomEdges","length","target","j","source","weight","calculateHiddenNodeValue","hiddenNode","filter","edge","reduce","acc","inputValue","calculateOutputNodeValue","hiddenNodeValues","summation","index","hiddenValue","Math","max","updatedHiddenNodes","map","node","outputValue","handleInputChange","e","inputName","prevState","parseFloat","handleInputComplete","handleWeightChange","rowIndex","colIndex","newWeights","handleOutputCalculation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","keys","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","type","style","onChange","onClick","toFixed","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// function NeuralNetwork({ inputValues }) {\n//   const [hiddenNodes, setHiddenNodes] = useState([\n//     { id: 'hidden1', x: 300, y: 150, value: 0 },\n//     { id: 'hidden2', x: 300, y: 250, value: 0 },\n//     { id: 'hidden3', x: 300, y: 350, value: 0 },\n//     { id: 'hidden4', x: 300, y: 450, value: 0 },\n//     // Default hidden nodes\n//   ]);\n//   const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0, color: 'red' }); // Output node\n//   const [inputNodeValues, setInputNodeValues] = useState({\n//     input1: 0,\n//     input2: 0,\n//     input3: 0,\n//     // Default input values\n//   });\n//   const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n//     const weights = [];\n//     for (let i = 0; i < 4; i++) {\n//       weights.push(Array(3).fill(0)); // Initialize each row with 3 weights with default value 0\n//     }\n//     return weights;\n//   });\n//   const [edges, setEdges] = useState([]);\n//   const [inputsComplete, setInputsComplete] = useState(false);\n\n//   // Function to generate random edges with weights\n//   const generateRandomEdges = () => {\n//     const edges = [];\n//     for (let i = 0; i < hiddenNodes.length; i++) {\n//       const target = hiddenNodes[i].id;\n//       for (let j = 0; j < 3; j++) {\n//         const source = `input${j + 1}`;\n//         const weight = inputToHiddenWeights[i][j]; // Use the weight from inputToHiddenWeights\n//         edges.push({ source, target, weight });\n//       }\n//     }\n//     return edges;\n//   };\n\n//   // Function to calculate the value of a hidden node\n//   const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n//     const value = edges\n//       .filter(edge => edge.target === hiddenNode.id)\n//       .reduce((acc, edge) => {\n//         const inputValue = inputNodeValues[edge.source];\n//         const weight = edge.weight;\n//         return acc + inputValue * weight;\n//       }, 0);\n//     // Apply ReLU activation function\n//     return value >= 0 ? value : 0;\n//   };\n\n//   useEffect(() => {\n//     // Initialize input values whenever inputValues prop changes\n//     setInputNodeValues(inputValues);\n//   }, [inputValues]);\n\n//   useEffect(() => {\n//     // Update hidden node values whenever input node values change\n//     if (inputsComplete) {\n//       const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n//         const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n//         return { ...hiddenNode, value };\n//       });\n//       setHiddenNodes(updatedHiddenNodes);\n//     }\n//   }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n\n//   useEffect(() => {\n//     // Generate random edges whenever input values or hidden nodes change\n//     setEdges(generateRandomEdges());\n//   }, [inputNodeValues, hiddenNodes, inputToHiddenWeights]);\n\n//   const handleInputChange = (e, inputName) => {\n//     setInputNodeValues(prevState => ({ ...prevState, [inputName]: parseFloat(e.target.value) }));\n//   };\n\n//   const handleInputComplete = () => {\n//     setInputsComplete(true);\n//   };\n\n//   const handleWeightChange = (e, rowIndex, colIndex) => {\n//     const newWeights = [...inputToHiddenWeights];\n//     newWeights[rowIndex][colIndex] = parseFloat(e.target.value);\n//     setInputToHiddenWeights(newWeights);\n//   };\n\n//   return (\n//     <div className=\"NeuralNetwork\">\n//       <div className=\"t\">Perceptron</div>\n//       <svg width=\"1200\" height=\"800\">\n//         {/* Render edges from input nodes to hidden nodes */}\n//         {[...Array(3).keys()].map((i) => (\n//           [...Array(4).keys()].map((j) => (\n//             <g key={`input-hidden-${i}-${j}`}>\n//               <line\n//                 x1={130}\n//                 y1={(i + 1) * 210}\n//                 x2={370}\n//                 y2={(j + 1) * 175}\n//                 stroke=\"black\"\n//                 strokeWidth=\"2\"\n//                 markerEnd=\"url(#arrowhead)\"\n//               />\n//               <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n//                 <input\n//                   type=\"number\"\n//                   style={{ width: \"20px\", height: \"20px\" }}\n//                   value={inputToHiddenWeights[j][i]} // Adjusted indexing for weights array\n//                   onChange={(e) => handleWeightChange(e, j, i)} // Pass rowIndex and colIndex\n//                 />\n//               </foreignObject>\n//             </g>\n//           ))\n//         ))}\n\n\n//         {/* Render edges from hidden nodes to output node */}\n//         {[...Array(4).keys()].map((index) => (\n//           <g key={`hidden-output-${index}`}>\n//             <line\n//               x1={429}\n//               y1={(index + 1) * 176}\n//               x2={619}\n//               y2={400}\n//               stroke=\"black\"\n//               strokeWidth=\"2\"\n//               markerEnd=\"url(#arrowhead)\"\n//             />\n//             <foreignObject x={(400 + 650) / 2 - 10} y={(index + 1) * 190 + (410 - (index + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n//               <input type=\"number\" style={{ width: \"20px\", height: \"20px\" }} />\n//             </foreignObject>\n//           </g>\n//         ))}\n\n//         {/* Render input nodes */}\n//         {Object.keys(inputNodeValues).map((input, index) => (\n//           <g key={input}>\n//             <circle cx={100} cy={(index + 1) * 210} r=\"30\" fill=\"green\" opacity=\"0.96\"/>\n//             <text x={100} y={(index + 1) * 210} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`I ${index + 1}`}</text>\n//             {/* Display input value dynamically */}\n//             <text x={100} y={(index + 1) * 210 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{inputNodeValues[input]}</text>\n//           </g>\n//         ))}\n\n//         {/* Render hidden nodes */}\n//         {hiddenNodes.map((node, index) => (\n//           <g key={`hidden-${index}`}>\n//             <circle cx={node.x} cy={node.y} r=\"30\" fill=\"blue\" opacity=\"0.96\"/>\n//             <text x={node.x} y={node.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">{`H ${index + 1}`}</text>\n//             {/* Display hidden node value dynamically */}\n//             <text x={node.x} y={node.y + 40} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">{node.value.toFixed(2)}</text>\n//           </g>\n//         ))}\n\n//         {/* Render output node */}\n//         <g key={`output`}>\n//           <circle cx={outputNode.x} cy={outputNode.y} r=\"30\" fill={outputNode.color} opacity=\"0.96\"/>\n//           <text x={outputNode.x} y={outputNode.y} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n//           {/* Display output value dynamically rounded to 2 decimal places */}\n//           <text x={outputNode.x} y={outputNode.y + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">\n//             {outputNode.activation.toFixed(2)}\n//           </text>\n//         </g>\n\n//         {/* Arrowhead marker */}\n//         <marker\n//           id=\"arrowhead\"\n//           markerWidth=\"10\"\n//           markerHeight=\"10\"\n//           refX=\"8\"\n//           refY=\"3\"\n//           orient=\"auto\"\n//           fill=\"black\"\n//         >\n//           <polygon points=\"0 0, 10 3, 0 6\" />\n//         </marker>\n//       </svg>\n\n//       {!inputsComplete && <button onClick={handleInputComplete}>Calculate Hidden Values</button>}\n//     </div>\n//   );\n// }\n\n// export default NeuralNetwork;\n\n\nimport React, { useState, useEffect } from 'react';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150, value: 0 },\n    { id: 'hidden2', x: 300, y: 250, value: 0 },\n    { id: 'hidden3', x: 300, y: 350, value: 0 },\n    { id: 'hidden4', x: 300, y: 450, value: 0 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0, color: 'red' }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n    const weights = [];\n    for (let i = 0; i < 4; i++) {\n      weights.push(Array(3).fill(0)); // Initialize each row with 3 weights with default value 0\n    }\n    return weights;\n  });\n  const [outputWeights, setOutputWeights] = useState(Array(4).fill(0)); // Initialize output weights with default value 0\n  const [outputNodeValue, setOutputNodeValue] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [inputsComplete, setInputsComplete] = useState(false);\n\n  // Function to generate random edges with weights\n  const generateRandomEdges = () => {\n    const edges = [];\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < 3; j++) {\n        const source = `input${j + 1}`;\n        const weight = inputToHiddenWeights[i][j]; // Use the weight from inputToHiddenWeights\n        edges.push({ source, target, weight });\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      const source = `hidden${i + 1}`;\n      const weight = outputWeights[i]; // Use the weight from outputWeights\n      edges.push({ source, target: 'output', weight });\n    }\n    return edges;\n  };\n\n  // Function to calculate the value of a hidden node\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges\n      .filter(edge => edge.target === hiddenNode.id)\n      .reduce((acc, edge) => {\n        const inputValue = inputNodeValues[edge.source];\n        const weight = edge.weight;\n        return acc + inputValue * weight;\n      }, 0);\n    // Apply ReLU activation function\n    return value >= 0 ? value : 0;\n  };\n\n  // Function to calculate the value of the output node\n  const calculateOutputNodeValue = (hiddenNodeValues) => {\n    const summation = outputWeights.reduce((acc, weight, index) => {\n      const hiddenValue = hiddenNodeValues[index];\n      return acc + hiddenValue * weight;\n    }, 0);\n    return Math.max(0, summation); // Apply ReLU activation function\n  };\n\n  useEffect(() => {\n    // Initialize input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update hidden node values whenever input node values change\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode, index) => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, edges);\n        return { ...hiddenNode, value };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete, edges, hiddenNodes]);\n\n  useEffect(() => {\n    // Calculate output node value whenever hidden node values change\n    const hiddenNodeValues = hiddenNodes.map(node => node.value);\n    const outputValue = calculateOutputNodeValue(hiddenNodeValues);\n    setOutputNodeValue(outputValue);\n  }, [hiddenNodes]);\n\n  useEffect(() => {\n    // Generate random edges whenever input values or hidden nodes change\n    setEdges(generateRandomEdges());\n  }, [inputNodeValues, hiddenNodes, inputToHiddenWeights, outputWeights]);\n\n  const handleInputChange = (e, inputName) => {\n    setInputNodeValues(prevState => ({ ...prevState, [inputName]: parseFloat(e.target.value) }));\n  };\n\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n\n  const handleWeightChange = (e, rowIndex, colIndex) => {\n    const newWeights = [...inputToHiddenWeights];\n    newWeights[rowIndex][colIndex] = parseFloat(e.target.value);\n    setInputToHiddenWeights(newWeights);\n  };\n\n  const handleOutputCalculation = () => {\n    const hiddenNodeValues = hiddenNodes.map(node => node.value);\n    const outputValue = calculateOutputNodeValue(hiddenNodeValues);\n    setOutputNodeValue(outputValue);\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">Perceptron</div>\n      <svg width=\"1200\" height=\"800\">\n        {/* Render edges from input nodes to hidden nodes */}\n        {[...Array(3).keys()].map((i) => (\n          [...Array(4).keys()].map((j) => (\n            <g key={`input-hidden-${i}-${j}`}>\n              <line\n                x1={130}\n                y1={(i + 1) * 210}\n                x2={370}\n                y2={(j + 1) * 175}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                markerEnd=\"url(#arrowhead)\"\n              />\n              <foreignObject x={(130 + 350) / 2 - 1} y={(i + 1) * 185 + ((j + 1) * 210 - (i + 1) * 210) / 2 - 10} width=\"20\" height=\"20\">\n                <input\n                  type=\"number\"\n                  style={{ width: \"20px\", height: \"20px\" }}\n                  value={inputToHiddenWeights[j][i]} // Adjusted indexing for weights array\n                  onChange={(e) => handleWeightChange(e, j, i)} // Pass rowIndex and colIndex\n                />\n              </foreignObject>\n            </g>\n          ))\n        ))}\n        {/* Other SVG elements */}\n      </svg>\n      {!inputsComplete && <button onClick={handleInputComplete}>Calculate Hidden Values</button>}\n      {inputsComplete && <button onClick={handleOutputCalculation}>Calculate Output Value</button>}\n      {/* Display output node value */}\n      <div>Output Value: {outputNodeValue.toFixed(2)}</div>\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,aAAaA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAC7C;IAAES,EAAE,EAAE,SAAS;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC3C;IAAEH,EAAE,EAAE,SAAS;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC3C;IAAEH,EAAE,EAAE,SAAS;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC3C;IAAEH,EAAE,EAAE,SAAS;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAE;EAC1C;EAAA,CACD,CAAC;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC;IAAES,EAAE,EAAE,QAAQ;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEI,UAAU,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAM,CAAC,CAAC,CAAC,CAAC;EAC7G,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC;IACrDmB,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE;IACR;EACF,CAAC,CAAC;EACF,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvB,QAAQ,CAAC,MAAM;IACrE,MAAMwB,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,OAAO,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC;IACA,OAAOJ,OAAO;EAChB,CAAC,CAAC;EACF,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAG9B,QAAQ,CAAC2B,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACiC,KAAK,EAAEC,QAAQ,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACmC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA,MAAMqC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMJ,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,WAAW,CAAC+B,MAAM,EAAEb,CAAC,EAAE,EAAE;MAC3C,MAAMc,MAAM,GAAGhC,WAAW,CAACkB,CAAC,CAAC,CAAChB,EAAE;MAChC,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,MAAMC,MAAM,GAAG,QAAQD,CAAC,GAAG,CAAC,EAAE;QAC9B,MAAME,MAAM,GAAGpB,oBAAoB,CAACG,CAAC,CAAC,CAACe,CAAC,CAAC,CAAC,CAAC;QAC3CP,KAAK,CAACP,IAAI,CAAC;UAAEe,MAAM;UAAEF,MAAM;UAAEG;QAAO,CAAC,CAAC;MACxC;IACF;IACA,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMgB,MAAM,GAAG,SAAShB,CAAC,GAAG,CAAC,EAAE;MAC/B,MAAMiB,MAAM,GAAGb,aAAa,CAACJ,CAAC,CAAC,CAAC,CAAC;MACjCQ,KAAK,CAACP,IAAI,CAAC;QAAEe,MAAM;QAAEF,MAAM,EAAE,QAAQ;QAAEG;MAAO,CAAC,CAAC;IAClD;IACA,OAAOT,KAAK;EACd,CAAC;;EAED;EACA,MAAMU,wBAAwB,GAAGA,CAACC,UAAU,EAAE3B,eAAe,EAAEgB,KAAK,KAAK;IACvE,MAAMrB,KAAK,GAAGqB,KAAK,CAChBY,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACP,MAAM,KAAKK,UAAU,CAACnC,EAAE,CAAC,CAC7CsC,MAAM,CAAC,CAACC,GAAG,EAAEF,IAAI,KAAK;MACrB,MAAMG,UAAU,GAAGhC,eAAe,CAAC6B,IAAI,CAACL,MAAM,CAAC;MAC/C,MAAMC,MAAM,GAAGI,IAAI,CAACJ,MAAM;MAC1B,OAAOM,GAAG,GAAGC,UAAU,GAAGP,MAAM;IAClC,CAAC,EAAE,CAAC,CAAC;IACP;IACA,OAAO9B,KAAK,IAAI,CAAC,GAAGA,KAAK,GAAG,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMsC,wBAAwB,GAAIC,gBAAgB,IAAK;IACrD,MAAMC,SAAS,GAAGvB,aAAa,CAACkB,MAAM,CAAC,CAACC,GAAG,EAAEN,MAAM,EAAEW,KAAK,KAAK;MAC7D,MAAMC,WAAW,GAAGH,gBAAgB,CAACE,KAAK,CAAC;MAC3C,OAAOL,GAAG,GAAGM,WAAW,GAAGZ,MAAM;IACnC,CAAC,EAAE,CAAC,CAAC;IACL,OAAOa,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,SAAS,CAAC,CAAC,CAAC;EACjC,CAAC;EAEDnD,SAAS,CAAC,MAAM;IACd;IACAiB,kBAAkB,CAACb,WAAW,CAAC;EACjC,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjBJ,SAAS,CAAC,MAAM;IACd;IACA,IAAIkC,cAAc,EAAE;MAClB,MAAMsB,kBAAkB,GAAGlD,WAAW,CAACmD,GAAG,CAAC,CAACd,UAAU,EAAES,KAAK,KAAK;QAChE,MAAMzC,KAAK,GAAG+B,wBAAwB,CAACC,UAAU,EAAE3B,eAAe,EAAEgB,KAAK,CAAC;QAC1E,OAAO;UAAE,GAAGW,UAAU;UAAEhC;QAAM,CAAC;MACjC,CAAC,CAAC;MACFJ,cAAc,CAACiD,kBAAkB,CAAC;IACpC;EACF,CAAC,EAAE,CAACxC,eAAe,EAAEkB,cAAc,EAAEF,KAAK,EAAE1B,WAAW,CAAC,CAAC;EAEzDN,SAAS,CAAC,MAAM;IACd;IACA,MAAMkD,gBAAgB,GAAG5C,WAAW,CAACmD,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC/C,KAAK,CAAC;IAC5D,MAAMgD,WAAW,GAAGV,wBAAwB,CAACC,gBAAgB,CAAC;IAC9DnB,kBAAkB,CAAC4B,WAAW,CAAC;EACjC,CAAC,EAAE,CAACrD,WAAW,CAAC,CAAC;EAEjBN,SAAS,CAAC,MAAM;IACd;IACAiC,QAAQ,CAACG,mBAAmB,CAAC,CAAC,CAAC;EACjC,CAAC,EAAE,CAACpB,eAAe,EAAEV,WAAW,EAAEe,oBAAoB,EAAEO,aAAa,CAAC,CAAC;EAEvE,MAAMgC,iBAAiB,GAAGA,CAACC,CAAC,EAAEC,SAAS,KAAK;IAC1C7C,kBAAkB,CAAC8C,SAAS,KAAK;MAAE,GAAGA,SAAS;MAAE,CAACD,SAAS,GAAGE,UAAU,CAACH,CAAC,CAACvB,MAAM,CAAC3B,KAAK;IAAE,CAAC,CAAC,CAAC;EAC9F,CAAC;EAED,MAAMsD,mBAAmB,GAAGA,CAAA,KAAM;IAChC9B,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAM+B,kBAAkB,GAAGA,CAACL,CAAC,EAAEM,QAAQ,EAAEC,QAAQ,KAAK;IACpD,MAAMC,UAAU,GAAG,CAAC,GAAGhD,oBAAoB,CAAC;IAC5CgD,UAAU,CAACF,QAAQ,CAAC,CAACC,QAAQ,CAAC,GAAGJ,UAAU,CAACH,CAAC,CAACvB,MAAM,CAAC3B,KAAK,CAAC;IAC3DW,uBAAuB,CAAC+C,UAAU,CAAC;EACrC,CAAC;EAED,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;IACpC,MAAMpB,gBAAgB,GAAG5C,WAAW,CAACmD,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC/C,KAAK,CAAC;IAC5D,MAAMgD,WAAW,GAAGV,wBAAwB,CAACC,gBAAgB,CAAC;IAC9DnB,kBAAkB,CAAC4B,WAAW,CAAC;EACjC,CAAC;EAED,oBACEzD,OAAA;IAAKqE,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BtE,OAAA;MAAKqE,SAAS,EAAC,GAAG;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnC1E,OAAA;MAAK2E,KAAK,EAAC,MAAM;MAACC,MAAM,EAAC,KAAK;MAAAN,QAAA,EAE3B,CAAC,GAAG9C,KAAK,CAAC,CAAC,CAAC,CAACqD,IAAI,CAAC,CAAC,CAAC,CAACtB,GAAG,CAAEjC,CAAC,IAC1B,CAAC,GAAGE,KAAK,CAAC,CAAC,CAAC,CAACqD,IAAI,CAAC,CAAC,CAAC,CAACtB,GAAG,CAAElB,CAAC,iBACzBrC,OAAA;QAAAsE,QAAA,gBACEtE,OAAA;UACE8E,EAAE,EAAE,GAAI;UACRC,EAAE,EAAE,CAACzD,CAAC,GAAG,CAAC,IAAI,GAAI;UAClB0D,EAAE,EAAE,GAAI;UACRC,EAAE,EAAE,CAAC5C,CAAC,GAAG,CAAC,IAAI,GAAI;UAClB6C,MAAM,EAAC,OAAO;UACdC,WAAW,EAAC,GAAG;UACfC,SAAS,EAAC;QAAiB;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eACF1E,OAAA;UAAeO,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAE;UAACC,CAAC,EAAE,CAACc,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAACe,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAACf,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAG;UAACqD,KAAK,EAAC,IAAI;UAACC,MAAM,EAAC,IAAI;UAAAN,QAAA,eACxHtE,OAAA;YACEqF,IAAI,EAAC,QAAQ;YACbC,KAAK,EAAE;cAAEX,KAAK,EAAE,MAAM;cAAEC,MAAM,EAAE;YAAO,CAAE;YACzCnE,KAAK,EAAEU,oBAAoB,CAACkB,CAAC,CAAC,CAACf,CAAC,CAAE,CAAC;YAAA;YACnCiE,QAAQ,EAAG5B,CAAC,IAAKK,kBAAkB,CAACL,CAAC,EAAEtB,CAAC,EAAEf,CAAC,CAAE,CAAC;UAAA;YAAAiD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACW,CAAC;MAAA,GAjBV,gBAAgBpD,CAAC,IAAIe,CAAC,EAAE;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkB7B,CACJ,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC,CAAC,EACL,CAAC1C,cAAc,iBAAIhC,OAAA;MAAQwF,OAAO,EAAEzB,mBAAoB;MAAAO,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzF1C,cAAc,iBAAIhC,OAAA;MAAQwF,OAAO,EAAEpB,uBAAwB;MAAAE,QAAA,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE5F1E,OAAA;MAAAsE,QAAA,GAAK,gBAAc,EAAC1C,eAAe,CAAC6D,OAAO,CAAC,CAAC,CAAC;IAAA;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV;AAACvE,EAAA,CAxJQF,aAAa;AAAAyF,EAAA,GAAbzF,aAAa;AA0JtB,eAAeA,aAAa;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}