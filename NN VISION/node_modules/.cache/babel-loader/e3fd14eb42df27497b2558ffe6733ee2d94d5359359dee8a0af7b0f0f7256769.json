{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils'; // Ensure the correct import path\nimport ArchitectureSelection from './ArchitectureSelection';\nimport UserInput from './UserInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues,\n  architecture = 'FCNN'\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150,\n    value: 0,\n    weight: 0.5\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250,\n    value: 0,\n    weight: 0.4\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350,\n    value: 0,\n    weight: -0.2\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450,\n    value: 0,\n    weight: 0.1\n  }]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0,\n    color: 'red',\n    size: 30\n  });\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n  });\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n    const weights = [];\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      weights.push(Array(3).fill(0));\n    }\n    return weights;\n  });\n  const [inputsComplete, setInputsComplete] = useState(false);\n  const [outputNodeValue, setOutputNodeValue] = useState(0);\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges.filter(edge => edge.target === hiddenNode.id).reduce((acc, edge) => {\n      const inputValue = inputNodeValues[edge.source];\n      const weight = edge.weight;\n      return acc + inputValue * weight;\n    }, 0);\n    return Math.max(0, value); // ReLU activation\n  };\n  const calculateOutputNodeValue = () => {\n    const summation = hiddenNodes.reduce((acc, hiddenNode) => {\n      return acc + hiddenNode.value * hiddenNode.weight; // Calculate output based on hidden nodes\n    }, 0);\n    return Math.max(0, summation); // Apply ReLU to the output node\n  };\n  useEffect(() => {\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map(hiddenNode => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, inputToHiddenWeights);\n        return {\n          ...hiddenNode,\n          value\n        };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete]);\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n  const handleOutputCalculation = () => {\n    const outputValue = calculateOutputNodeValue();\n    setOutputNodeValue(outputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"t\",\n      children: \"NN VISION\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"network-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"800\",\n        height: \"600\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: outputNode.x - 50,\n          cy: outputNode.y + 100,\n          r: outputNode.size,\n          fill: outputNode.color,\n          opacity: \"0.7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x - 50,\n          y: outputNode.y + 100,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: \"Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: outputNode.x - 50,\n          y: outputNode.y + 100 + 50,\n          fill: \"black\",\n          textAnchor: \"middle\",\n          alignmentBaseline: \"central\",\n          children: outputNodeValue.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(ArchitectureSelection, {\n          setArchitecture: architecture\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n          setInputValues: setInputNodeValues\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInputComplete,\n          children: \"Calculate Hidden Values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOutputCalculation,\n          children: \"Calculate Output Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"YezYqnrQWJ9FrxX0NL+mkkgx854=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","ArchitectureSelection","UserInput","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","architecture","_s","hiddenNodes","setHiddenNodes","id","x","y","value","weight","outputNode","setOutputNode","activation","color","size","inputNodeValues","setInputNodeValues","input1","input2","input3","inputToHiddenWeights","setInputToHiddenWeights","weights","i","length","push","Array","fill","inputsComplete","setInputsComplete","outputNodeValue","setOutputNodeValue","calculateHiddenNodeValue","hiddenNode","edges","filter","edge","target","reduce","acc","inputValue","source","Math","max","calculateOutputNodeValue","summation","updatedHiddenNodes","map","handleInputComplete","handleOutputCalculation","outputValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","cx","cy","r","opacity","textAnchor","alignmentBaseline","toFixed","setArchitecture","setInputValues","onClick","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils'; // Ensure the correct import path\nimport ArchitectureSelection from './ArchitectureSelection';\nimport UserInput from './UserInput';\n\nfunction NeuralNetwork({ inputValues, architecture = 'FCNN' }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150, value: 0, weight: 0.5 },\n    { id: 'hidden2', x: 300, y: 250, value: 0, weight: 0.4 },\n    { id: 'hidden3', x: 300, y: 350, value: 0, weight: -0.2 },\n    { id: 'hidden4', x: 300, y: 450, value: 0, weight: 0.1 },\n  ]);\n\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0,\n    color: 'red',\n    size: 30,\n  });\n\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n  });\n\n  const [inputToHiddenWeights, setInputToHiddenWeights] = useState(() => {\n    const weights = [];\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      weights.push(Array(3).fill(0)); \n    }\n    return weights;\n  });\n\n  const [inputsComplete, setInputsComplete] = useState(false);\n  const [outputNodeValue, setOutputNodeValue] = useState(0);\n\n  const calculateHiddenNodeValue = (hiddenNode, inputNodeValues, edges) => {\n    const value = edges\n      .filter(edge => edge.target === hiddenNode.id)\n      .reduce((acc, edge) => {\n        const inputValue = inputNodeValues[edge.source];\n        const weight = edge.weight;\n        return acc + inputValue * weight;\n      }, 0);\n    return Math.max(0, value); // ReLU activation\n  };\n\n  const calculateOutputNodeValue = () => {\n    const summation = hiddenNodes.reduce((acc, hiddenNode) => {\n      return acc + hiddenNode.value * hiddenNode.weight; // Calculate output based on hidden nodes\n    }, 0);\n    return Math.max(0, summation); // Apply ReLU to the output node\n  };\n\n  useEffect(() => {\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    if (inputsComplete) {\n      const updatedHiddenNodes = hiddenNodes.map((hiddenNode) => {\n        const value = calculateHiddenNodeValue(hiddenNode, inputNodeValues, inputToHiddenWeights);\n        return { ...hiddenNode, value };\n      });\n      setHiddenNodes(updatedHiddenNodes);\n    }\n  }, [inputNodeValues, inputsComplete]);\n\n  const handleInputComplete = () => {\n    setInputsComplete(true);\n  };\n\n  const handleOutputCalculation = () => {\n    const outputValue = calculateOutputNodeValue();\n    setOutputNodeValue(outputValue);\n  };\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <div className=\"t\">NN VISION</div>\n\n      <div className=\"network-container\">\n        <svg width=\"800\" height=\"600\">\n          {/* Drawing Input to Hidden connections and nodes */}\n          {/* (Your existing SVG rendering code here) */}\n\n          {/* Drawing Output Node */}\n          <circle cx={outputNode.x - 50} cy={outputNode.y + 100} r={outputNode.size} fill={outputNode.color} opacity=\"0.7\" />\n          <text x={outputNode.x - 50} y={outputNode.y + 100} fill=\"white\" textAnchor=\"middle\" alignmentBaseline=\"central\">Out</text>\n          <text x={outputNode.x - 50} y={outputNode.y + 100 + 50} fill=\"black\" textAnchor=\"middle\" alignmentBaseline=\"central\">\n            {outputNodeValue.toFixed(2)}\n          </text>\n        </svg>\n\n        <div className=\"controls\">\n          <ArchitectureSelection setArchitecture={architecture} />\n          <UserInput setInputValues={setInputNodeValues} />\n          <button onClick={handleInputComplete}>Calculate Hidden Values</button>\n          <button onClick={handleOutputCalculation}>Calculate Output Value</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}