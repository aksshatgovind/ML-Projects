{"ast":null,"code":"var _jsxFileName = \"/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { calculateFinalActivation } from '../utils';\n\n// function NeuralNetwork({ inputValues }) {\n//   const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n//   const [edges, setEdges] = useState(generateRandomEdges());\n//   const [finalActivation, setFinalActivation] = useState(0);\n\n//   function generateRandomHiddenNodes() {\n//     const numNodes = Math.floor(Math.random() * 5) + 1;\n//     const nodes = [];\n//     for (let i = 0; i < numNodes; i++) {\n//       nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n//     }\n//     return nodes;\n//   }\n\n//   function generateRandomEdges() {\n//     const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length;\n//     const edges = [];\n//     const inputNodeIds = Object.keys(inputValues);\n//     for (let i = 0; i < numEdges; i++) {\n//       const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)];\n//       const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`;\n//       const weight = Math.random() * 2 - 1;\n//       edges.push({ source, target, weight });\n//     }\n//     return edges;\n//   }\n\n//   useEffect(() => {\n//     setHiddenNodes(generateRandomHiddenNodes());\n//     setEdges(generateRandomEdges());\n//   }, [inputValues]);\n\n//   useEffect(() => {\n//     const activation = calculateFinalActivation(inputValues, hiddenNodes);\n//     setFinalActivation(activation);\n//   }, [inputValues, hiddenNodes]);\n\n//   const addHiddenNode = () => {\n//     const id = `hidden${hiddenNodes.length + 1}`;\n//     const newNode = { id, x: Math.random() * 500, y: Math.random() * 300 };\n//     setHiddenNodes([...hiddenNodes, newNode]);\n//   };\n\n//   const removeHiddenNode = (id) => {\n//     setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n//   };\n\n//   return (\n//     <div className=\"NeuralNetwork\">\n//       <svg width=\"800\" height=\"400\">\n//         {/* Render nodes */}\n//         {hiddenNodes.map(node => (\n//           <circle key={node.id} cx={node.x} cy={node.y} r=\"20\" fill=\"blue\" />\n//         ))}\n\n//         {/* Render edges */}\n//         {edges.map(edge => (\n//           <line key={`${edge.source}-${edge.target}`} x1={edge.sourceX} y1={edge.sourceY} x2={edge.targetX} y2={edge.targetY} stroke=\"black\" strokeWidth=\"2\" />\n//         ))}\n\n//         {/* Render animations */}\n//         {edges.map(edge => (\n//           <circle key={`${edge.source}-${edge.target}-animation`} cx={edge.sourceX} cy={edge.sourceY} r=\"5\" fill=\"red\">\n//             <animateMotion dur=\"2s\" repeatCount=\"indefinite\">\n//               <mpath href={`#path-${edge.source}-${edge.target}`} />\n//             </animateMotion>\n//           </circle>\n//         ))}\n\n//         {/* Render paths for animations */}\n//         {edges.map(edge => (\n//           <path key={`path-${edge.source}-${edge.target}`} id={`path-${edge.source}-${edge.target}`} d={`M ${edge.sourceX} ${edge.sourceY} L ${edge.targetX} ${edge.targetY}`} />\n//         ))}\n\n//         {/* Render output node */}\n//         <text x=\"700\" y=\"100\" fill=\"black\">Output Node: {finalActivation}</text>\n//       </svg>\n//       <button onClick={addHiddenNode}>Add Hidden Node</button>\n//       {hiddenNodes.map(node => (\n//         <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default NeuralNetwork;\n\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NeuralNetwork({\n  inputValues\n}) {\n  _s();\n  const [hiddenNodes, setHiddenNodes] = useState([{\n    id: 'hidden1',\n    x: 300,\n    y: 150\n  }, {\n    id: 'hidden2',\n    x: 300,\n    y: 250\n  }, {\n    id: 'hidden3',\n    x: 300,\n    y: 350\n  }, {\n    id: 'hidden4',\n    x: 300,\n    y: 450\n  }\n  // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({\n    id: 'output',\n    x: 700,\n    y: 300,\n    activation: 0\n  }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0\n    // Default input values\n  });\n  const [edges, setEdges] = useState(generateRandomEdges());\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  useEffect(() => {\n    // Update input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({\n      ...prevState,\n      activation\n    }));\n  }, [inputNodeValues, hiddenNodes]);\n  function generateRandomEdges() {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({\n          source,\n          target,\n          weight\n        });\n      }\n    }\n    return edges;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NeuralNetwork\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"nn\",\n      children: \"NN VISION\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"800\",\n      height: \"600\",\n      children: [Object.keys(inputNodeValues).map((input, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100,\n          cy: (index + 1) * 100,\n          r: \"20\",\n          fill: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: 130,\n          y: (index + 1) * 100 + 5,\n          children: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n          x: 150,\n          y: (index + 1) * 100 - 10,\n          width: \"40\",\n          height: \"40\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: input,\n            value: inputNodeValues[input],\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, input, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)), hiddenNodes.map(node => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        fill: \"blue\"\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: outputNode.x,\n        cy: outputNode.y,\n        r: \"20\",\n        fill: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: outputNode.x - 50,\n        y: outputNode.y + 5,\n        fill: \"black\",\n        children: [\"Output Node: \", outputNode.activation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 100,\n        y1: (index + 1) * 100,\n        x2: 300,\n        y2: hiddenNodes.findIndex(node => node.id === edge.target) * 100 + 150,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(NeuralNetwork, \"q3SrHCvqiA5ZeQSpeZZw4zasIWA=\");\n_c = NeuralNetwork;\nexport default NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");","map":{"version":3,"names":["React","useState","useEffect","calculateFinalActivation","jsxDEV","_jsxDEV","NeuralNetwork","inputValues","_s","hiddenNodes","setHiddenNodes","id","x","y","outputNode","setOutputNode","activation","inputNodeValues","setInputNodeValues","input1","input2","input3","edges","setEdges","generateRandomEdges","handleInputChange","e","name","value","target","prevState","inputNodeIds","Object","keys","i","length","j","source","weight","Math","random","push","className","children","class","fileName","_jsxFileName","lineNumber","columnNumber","width","height","map","input","index","cx","cy","r","fill","type","onChange","node","edge","x1","y1","x2","y2","findIndex","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["/Users/coding/Library/Mobile Documents/com~apple~CloudDocs/Documents/vs/ML-Projects/NN VISION/src/components/NeuralNetwork.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { calculateFinalActivation } from '../utils';\n\n// function NeuralNetwork({ inputValues }) {\n//   const [hiddenNodes, setHiddenNodes] = useState(generateRandomHiddenNodes());\n//   const [edges, setEdges] = useState(generateRandomEdges());\n//   const [finalActivation, setFinalActivation] = useState(0);\n\n//   function generateRandomHiddenNodes() {\n//     const numNodes = Math.floor(Math.random() * 5) + 1;\n//     const nodes = [];\n//     for (let i = 0; i < numNodes; i++) {\n//       nodes.push({ id: `hidden${i + 1}`, x: Math.random() * 500, y: Math.random() * 300 });\n//     }\n//     return nodes;\n//   }\n\n//   function generateRandomEdges() {\n//     const numEdges = Math.floor(Math.random() * (hiddenNodes.length * 2)) + hiddenNodes.length;\n//     const edges = [];\n//     const inputNodeIds = Object.keys(inputValues);\n//     for (let i = 0; i < numEdges; i++) {\n//       const source = inputNodeIds[Math.floor(Math.random() * inputNodeIds.length)];\n//       const target = `hidden${Math.floor(Math.random() * hiddenNodes.length) + 1}`;\n//       const weight = Math.random() * 2 - 1;\n//       edges.push({ source, target, weight });\n//     }\n//     return edges;\n//   }\n\n//   useEffect(() => {\n//     setHiddenNodes(generateRandomHiddenNodes());\n//     setEdges(generateRandomEdges());\n//   }, [inputValues]);\n\n//   useEffect(() => {\n//     const activation = calculateFinalActivation(inputValues, hiddenNodes);\n//     setFinalActivation(activation);\n//   }, [inputValues, hiddenNodes]);\n\n//   const addHiddenNode = () => {\n//     const id = `hidden${hiddenNodes.length + 1}`;\n//     const newNode = { id, x: Math.random() * 500, y: Math.random() * 300 };\n//     setHiddenNodes([...hiddenNodes, newNode]);\n//   };\n\n//   const removeHiddenNode = (id) => {\n//     setHiddenNodes(hiddenNodes.filter(node => node.id !== id));\n//   };\n\n//   return (\n//     <div className=\"NeuralNetwork\">\n//       <svg width=\"800\" height=\"400\">\n//         {/* Render nodes */}\n//         {hiddenNodes.map(node => (\n//           <circle key={node.id} cx={node.x} cy={node.y} r=\"20\" fill=\"blue\" />\n//         ))}\n\n//         {/* Render edges */}\n//         {edges.map(edge => (\n//           <line key={`${edge.source}-${edge.target}`} x1={edge.sourceX} y1={edge.sourceY} x2={edge.targetX} y2={edge.targetY} stroke=\"black\" strokeWidth=\"2\" />\n//         ))}\n\n//         {/* Render animations */}\n//         {edges.map(edge => (\n//           <circle key={`${edge.source}-${edge.target}-animation`} cx={edge.sourceX} cy={edge.sourceY} r=\"5\" fill=\"red\">\n//             <animateMotion dur=\"2s\" repeatCount=\"indefinite\">\n//               <mpath href={`#path-${edge.source}-${edge.target}`} />\n//             </animateMotion>\n//           </circle>\n//         ))}\n\n//         {/* Render paths for animations */}\n//         {edges.map(edge => (\n//           <path key={`path-${edge.source}-${edge.target}`} id={`path-${edge.source}-${edge.target}`} d={`M ${edge.sourceX} ${edge.sourceY} L ${edge.targetX} ${edge.targetY}`} />\n//         ))}\n\n//         {/* Render output node */}\n//         <text x=\"700\" y=\"100\" fill=\"black\">Output Node: {finalActivation}</text>\n//       </svg>\n//       <button onClick={addHiddenNode}>Add Hidden Node</button>\n//       {hiddenNodes.map(node => (\n//         <button key={node.id} onClick={() => removeHiddenNode(node.id)}>Remove {node.id}</button>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default NeuralNetwork;\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { calculateFinalActivation } from '../utils';\n\nfunction NeuralNetwork({ inputValues }) {\n  const [hiddenNodes, setHiddenNodes] = useState([\n    { id: 'hidden1', x: 300, y: 150 },\n    { id: 'hidden2', x: 300, y: 250 },\n    { id: 'hidden3', x: 300, y: 350 },\n    { id: 'hidden4', x: 300, y: 450 },\n    // Default hidden nodes\n  ]);\n  const [outputNode, setOutputNode] = useState({ id: 'output', x: 700, y: 300, activation: 0 }); // Output node\n  const [inputNodeValues, setInputNodeValues] = useState({\n    input1: 0,\n    input2: 0,\n    input3: 0,\n    // Default input values\n  });\n  const [edges, setEdges] = useState(generateRandomEdges());\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setInputNodeValues(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    // Update input values whenever inputValues prop changes\n    setInputNodeValues(inputValues);\n  }, [inputValues]);\n\n  useEffect(() => {\n    // Update output node activation whenever input node values change\n    const activation = calculateFinalActivation(inputNodeValues, hiddenNodes);\n    setOutputNode(prevState => ({ ...prevState, activation }));\n  }, [inputNodeValues, hiddenNodes]);\n\n  function generateRandomEdges() {\n    const edges = [];\n    const inputNodeIds = Object.keys(inputNodeValues);\n    for (let i = 0; i < hiddenNodes.length; i++) {\n      const target = hiddenNodes[i].id;\n      for (let j = 0; j < inputNodeIds.length; j++) {\n        const source = inputNodeIds[j];\n        const weight = Math.random() * 2 - 1; // Random weight between -1 and 1\n        edges.push({ source, target, weight });\n      }\n    }\n    return edges;\n  }\n\n  return (\n    <div className=\"NeuralNetwork\">\n      <h1 class=\"nn\">NN VISION</h1>\n      <svg width=\"800\" height=\"600\">\n        {/* Render input nodes */}\n        {Object.keys(inputNodeValues).map((input, index) => (\n          <g key={input}>\n            <circle cx={100} cy={(index + 1) * 100} r=\"20\" fill=\"green\" />\n            <text x={130} y={(index + 1) * 100 + 5}>{input}</text>\n            <foreignObject x={150} y={(index + 1) * 100 - 10} width=\"40\" height=\"40\">\n              <input type=\"number\" name={input} value={inputNodeValues[input]} onChange={handleInputChange} />\n            </foreignObject>\n          </g>\n        ))}\n        {/* Render hidden nodes */}\n        {hiddenNodes.map(node => (\n          <circle key={node.id} cx={node.x} cy={node.y} r=\"20\" fill=\"blue\" />\n        ))}\n        {/* Render output node */}\n        <circle cx={outputNode.x} cy={outputNode.y} r=\"20\" fill=\"red\" />\n        <text x={outputNode.x - 50} y={outputNode.y + 5} fill=\"black\">Output Node: {outputNode.activation}</text>\n        {/* Render edges */}\n        {edges.map((edge, index) => (\n          <line key={index} x1={100} y1={(index + 1) * 100} x2={300} y2={hiddenNodes.findIndex(node => node.id === edge.target) * 100 + 150} stroke=\"black\" strokeWidth=\"2\" />\n        ))}\n      </svg>\n    </div>\n  );\n}\n\nexport default NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}